{
    "id": "id-19913",
    "authorId": "system",
    "created": 1614363653247,
    "customRepo": {
        "Add": {
            "id": "Add",
            "inputs": {
                "n1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "n2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const {n1, n2} = inputs;\nconst {r} = outputs;\n\nlog({n1, n2})\nr.next( n1 + n2 );",
            "completionOutputs": [
                "r"
            ]
        },
        "Multiply": {
            "id": "Multiply",
            "inputs": {
                "n1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "n2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { n1, n2 } = inputs;\nconst { r } = outputs;\n      \n// magic here\nr.next(n1 * n2);\n      ",
            "completionOutputs": [
                "r"
            ]
        },
        "FirstSecondRest": {
            "id": "FirstSecondRest",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "i0": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "i1": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "i2": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "i3": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "i4": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "rest": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { list } = inputs;\nconst { i0, i1, i2, i3, i4, rest } = outputs;\n      \nconst [_i0, _i1, _i2, _i3, _i4, _i5, ...r] = list;\n\n[i0, i1, i2, i3, i4].forEach((o, idx) => {\n    if (typeof list[idx] !== 'undefined') {\n        o.next(list[idx]);\n    }\n});\n\nr.length && rest.next(r)\n      "
        },
        "Divide": {
            "id": "Divide",
            "inputs": {
                "n1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "n2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "divByZero": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { n1, n2 } = inputs;\nconst { r, divByZero } = outputs;\n      \nif (n2 === 0) {\n      divByZero.next(n1);\n} else {\n      r.next(n1 / n2);\n}\n      "
        },
        "Subtract": {
            "id": "Subtract",
            "inputs": {
                "n1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "n2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { n1, n2 } = inputs;\nconst { r } = outputs;\n      \nr.next(n1 - n2);\n      ",
            "completionOutputs": [
                "r"
            ],
            "customViewCode": "<% if (inputs.n2) { %>\n-<%-inputs.n2%>\n<% } %>"
        },
        "Floor": {
            "id": "Floor",
            "inputs": {
                "n": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { n } = inputs;\nconst { r } = outputs;\n      \nr.next(Math.floor(n));\n      ",
            "completionOutputs": [
                "r"
            ]
        },
        "Round": {
            "id": "Round",
            "inputs": {
                "n": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { n } = inputs;\nconst { r } = outputs;\n      \n// magic here\nr.next(Math.round(n));\n      ",
            "completionOutputs": [
                "r"
            ]
        },
        "Random": {
            "id": "Random",
            "inputs": {
                "trigger": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { trigger } = inputs;\nconst { r } = outputs;\n      \nr.next(Math.random());\n      ",
            "completionOutputs": [
                "r"
            ]
        },
        "IsGreater": {
            "id": "IsGreater",
            "inputs": {
                "n1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "n2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "transform": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "true": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "false": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { n1, n2, transform} = inputs;\n\n\n      \nif (n1 > n2) {\n      outputs.true.next(isDefined(transform) ? transform : n1);\n} else {\n      outputs.false.next(isDefined(transform) ? transform : n2);\n}\n// magic here\n      ",
            "customViewCode": "<% if (inputs.n2) { %>  > <%- inputs.n2 %> <% } else { %> Is Greater <% } %>"
        },
        "Modulo": {
            "id": "Modulo",
            "inputs": {
                "n1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "n2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { n1, n2 } = inputs;\nconst { r } = outputs;\n      \n// magic here\nr.next(n1 % n2);\n      ",
            "completionOutputs": [
                "r"
            ]
        },
        "ParseInt": {
            "id": "ParseInt",
            "inputs": {
                "str": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "base": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "e": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { str, base } = inputs;\nconst { r, e } = outputs;\n        \n// magic here\nconst int = parseInt(str, base || 10);\nif (isNaN(int)) {\n    e.next(str);\n} else {\n    r.next(int);\n}  "
        },
        "Replace": {
            "id": "Replace",
            "inputs": {
                "str": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "from": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "to": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { str, from, to } = inputs;\nconst { r } = outputs;\n        \n// magic here\nr.next(str.replace(from, to));",
            "completionOutputs": [
                "r"
            ]
        },
        "IndexOf": {
            "id": "IndexOf",
            "inputs": {
                "str": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "char": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "notFound": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { str, char } = inputs;\nconst { r, notFound } = outputs;\n        \n// magic here\nconst i = str.indexOf(char);\nif (i !== -1) {\n    r.next(str.indexOf(char));\n} else {\n    notFound.next(str);\n}  "
        },
        "Split": {
            "id": "Split",
            "inputs": {
                "str": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "by": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { str, by } = inputs;\nconst { r } = outputs;\n        \n// magic here\nr.next(str.split(by));",
            "completionOutputs": [
                "r"
            ]
        },
        "IsEmpty": {
            "id": "IsEmpty",
            "inputs": {
                "str": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "true": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "false": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { str } = inputs;\n        \n// magic here\nif (str === \"\") {\n    outputs.true.next(str);\n} else {\n    outputs.false.next(str);\n}"
        },
        "SubStr": {
            "id": "SubStr",
            "inputs": {
                "str": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "from": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "to": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { str, from, to } = inputs;\nconst { r } = outputs;\n        \n// magic here\nr.next(str.substring(from, to));    ",
            "completionOutputs": [
                "r"
            ]
        },
        "RegexMatch": {
            "id": "RegexMatch",
            "inputs": {
                "str": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "pattern": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "match": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "noMatch": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { str, pattern } = inputs;\nconst { match, noMatch } = outputs;\n        \n// magic here\nconst regex = new RegExp(pattern);\nconst matches = str.match(regex);\n\nif (matches) {\n    match.next(matches);\n} else {\n    noMatch.next(str);\n}   "
        },
        "FormatMessage": {
            "id": "FormatMessage",
            "inputs": {
                "template": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "var1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "var2": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "var3": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { template, var1, var2, var3 } = inputs;\nconst { r } = outputs;\n        \n// magic here\n const replaced = template\n    .replace(\"$VAL3\", var3)\n    .replace(\"$VAL2\", var2)\n    .replace(\"$VAL\", var1)\n    .replace(\"$VAR3\", var3)\n    .replace(\"$VAR2\", var2)\n    .replace(\"$VAR\", var1);\nr.next(replaced);",
            "completionOutputs": [
                "r"
            ]
        },
        "FormatModel": {
            "id": "FormatModel",
            "inputs": {
                "template": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "model": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "model2": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { template, model, model2 } = inputs;\nconst { r } = outputs;\n        \n// magic here\nconst combined = { ...model, ...(model2 || {}) };\n  const find = (_, key) => {\n    const path = key.split(\".\");\n    let o = { ...combined };\n    for (let p of path) {\n      if (o && o[p]) {\n        o = o[p];\n      } else {\n        return key;\n      }\n    }\n    return o;\n  };\n\nconst replaced = template\n  .replace(/\\$\\{([a-zA-Z \\d\\.]*)\\}/g, find)\n  .replace(/<%=([a-zA-Z \\d\\.]*)%>/g, find);\n\nr.next(replaced);",
            "completionOutputs": [
                "r"
            ]
        },
        "Switch": {
            "id": "Switch",
            "inputs": {
                "val": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "case1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "case2": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "case3": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "case4": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "case5": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "transform": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "is1": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "is2": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "is3": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "is4": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "is5": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "other": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { val, case1, case2, case3, case4, case5, transform } = inputs;\nconst { is1, is2, is3, is4, is5, other } = outputs;\n\nconst valueToRespond = isDefined(transform) ? transform : val;\n// magic here\nswitch (val) {\n    case case1:\n        is1.next(valueToRespond);\n        break;\n    case case2:\n        is2.next(valueToRespond);\n        break;\n    case case3:\n        is3.next(valueToRespond);\n        break;\n    case case4:\n        is4.next(valueToRespond);\n        break;\n    case case4:\n        is5.next(valueToRespond);\n        break;\n    default:\n        other.next(valueToRespond);\n        break;\n}"
        },
        "Now": {
            "id": "Now",
            "inputs": {
                "trigger": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { trigger } = inputs;\nconst { r } = outputs;\n        \n// magic here\nr.next(Date.now());\n        ",
            "completionOutputs": [
                "r"
            ]
        },
        "EachMs": {
            "id": "EachMs",
            "inputs": {
                "ms": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { ms } = inputs;\nconst { r } = outputs;\n        \n// magic here\nconst s = setInterval(() => {\n    r.next();\n}, ms);\n\nadv.onCleanup(() => {\n    clearInterval(s);\n})        ",
            "completionOutputs": [
                "never"
            ]
        },
        "Stringify": {
            "id": "Stringify",
            "inputs": {
                "obj": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { obj } = inputs;\nconst { r } = outputs;\n        \n// magic here\nr.next(JSON.stringify(obj));",
            "completionOutputs": [
                "r"
            ]
        },
        "Parse": {
            "id": "Parse",
            "inputs": {
                "str": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "obj": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "e": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { str } = inputs;\nconst { obj, e } = outputs;\n        \n// magic here\ntry {\n    obj.next(JSON.parse(str));\n} catch (err) {\n    console.error(\"error parsing json\", err, str);\n    e.next({str, e});\n}"
        },
        "SetAttr": {
            "id": "SetAttr",
            "inputs": {
                "obj": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "k": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "v": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { obj, k, v } = inputs;\nconst { r } = outputs;\n        \n// magic here\nr.next({ ...obj, [k]: v });",
            "completionOutputs": [
                "r"
            ]
        },
        "Pick": {
            "id": "Pick",
            "inputs": {
                "obj": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "key": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "e": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { obj, key } = inputs;\nconst { r, e } = outputs;\n\n// magic here\n\nlet hadError = false;\n\nconst matches = {};\n\nconst normalized = key.replace(/\\[\"(([^\"])+)\"\\]/g, (match, p1, p2, offset) => {\n  const key = `__$$KEY$$__${offset}`;\n  matches[key] = p1;\n  return `.${key}`;\n});\n\n// outputs.log.next({matches, normalized});\n\nconst path = normalized.split(\".\");\nlet o = { ...obj };\nfor (let p of path) {\n  const key = matches[p] || p;\n  if (o && isDefined(o[key]) && o[key] !== null) {\n    o = o[key];\n  } else {\n    e.next(obj);\n    hadError = true;\n  }\n}\n\nif (!hadError) {\n  r.next(o);\n}\n",
            "customViewCode": "<% if (inputs.key) { %> Pick \"<%- inputs.key %>\" <% } else { %> Pick <% } %>",
            "completionOutputs": [
                "r",
                "e"
            ]
        },
        "EmptyObject": {
            "id": "EmptyObject",
            "inputs": {},
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const {  } = inputs;\nconst { r } = outputs;\n        \n// magic here\nr.next({});",
            "completionOutputs": [
                "r"
            ]
        },
        "RemoveAttr": {
            "id": "RemoveAttr",
            "inputs": {
                "obj": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "k": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { obj, k } = inputs;\nconst { r } = outputs;\n        \n// magic here\nconst o = { ...obj };\ndelete o[k];\nr.next(o);        ",
            "completionOutputs": [
                "r"
            ]
        },
        "HttpGet": {
            "id": "HttpGet",
            "inputs": {
                "url": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "headers": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { url, headers } = inputs;\nconst { r, error } = outputs;\n\nconst {onError} = adv;\n        \n// magic here\naxios.get(url, { headers, timeout: DEFAULT_AXIOS_TIMEOUT }).then((res) => {\n    r.next(res.data);\n}, (err) => {\n    onError(err);\n});",
            "completionOutputs": [
                "r"
            ]
        },
        "HttpPost": {
            "id": "HttpPost",
            "inputs": {
                "url": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "body": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "headers": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "bodyType": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "e": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { url, body, headers, bodyType } = inputs;\nconst { r, e } = outputs;\n\nconst {onError} = adv;\n\nconst config = {\n    headers,\n    timeout: DEFAULT_AXIOS_TIMEOUT\n}\n        \n// magic here\nif (bodyType === \"form\") {\n    const parts = [];\n    Object.keys(body).forEach((key) => {\n      parts.push(`${key}=${encodeURIComponent(body[key])}`);\n    });\n    axios.post(url, parts.join(\"&\"), config).then(\n      (res) => {\n        r.next(res.data);\n      },\n      (err) => {\n        const {response, message} = err;\n        const errorObj = response ? {data:response.data, status: response.status} : {data: message, status: -1};\n        e.next(errorObj)\n        onError(errorObj);\n      }\n    );\n  } else {\n    axios.post(url, body, config).then(\n      (res) => {\n        r.next(res.data);\n      },\n      (err) => {\n        const {response, message} = err;\n        const errorObj = response ? {data:response.data, status: response.status} : {data: message, status: -1};\n        e.next(errorObj)\n        onError(errorObj);\n      }\n    );\n  }"
        },
        "Id": {
            "id": "Id",
            "inputs": {
                "v": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "object",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "outputs.r.next(inputs.v)",
            "customViewCode": "",
            "completionOutputs": [
                "r"
            ]
        },
        "Transform": {
            "id": "Transform",
            "inputs": {
                "from": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "to": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { to } = inputs;\nconst { r } = outputs;\n        \n// magic here\nr.next(to);",
            "customViewCode": "<% if (inputs.to) { %> to \"<%- inputs.to %>\" <% } %>",
            "completionOutputs": [
                "r"
            ]
        },
        "Equals": {
            "id": "Equals",
            "inputs": {
                "val": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "compare": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "transform": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "else": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { val, compare, transform } = inputs;\nconst { r } = outputs;\n\nconst valueToPush = isDefined(transform) ? transform : val;\n        \n// magic here\nif (val === compare) {\n    r.next(valueToPush);\n}  else {\n    outputs['else'].next(valueToPush);\n}",
            "customViewCode": "<% if (inputs.compare) { %>Equals <%- inputs.compare %> <% } else { %> Equals <% } %>",
            "completionOutputs": [
                "r",
                "else"
            ]
        },
        "Debounce": {
            "id": "Debounce",
            "inputs": {
                "i": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "ms": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { i, ms } = inputs;\nconst { r } = outputs;\n        \n// magic here\nconst timer = adv.state.get(\"timer\");\n  if (timer) {\n    clearTimeout(timer);\n  }\n\n  const newTimer = setTimeout(() => {\n    r.next(i);\n  }, ms);\n\n  adv.state.set(\"timer\", newTimer);\n\n  adv.onCleanup(() => {\n    clearTimeout(timer);\n  })",
            "customViewCode": "",
            "reactiveInputs": [
                "i"
            ],
            "completionOutputs": [
                "r"
            ]
        },
        "Delay": {
            "id": "Delay",
            "inputs": {
                "value": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "ms": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {value, ms} = inputs;\n const timer = setTimeout(() => {\n    outputs.r.next(value);\n}, ms);\n\nadv.onCleanup(() => clearTimeout(timer));",
            "controlled": false,
            "customViewCode": "",
            "completionOutputs": [
                "r"
            ]
        },
        "DbFind": {
            "id": "DbFind",
            "inputs": {
                "query": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "sort": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "limit": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "skip": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "res": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "err": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {query, sort, limit, skip} = inputs;\ndb.find(query, sort || {}, Math.min(limit, 1000), {}, skip)\n    .then(d => outputs.res.next(d))\n    .catch(err => outputs.err.next(err.toString()));\n",
            "controlled": false
        },
        "DbInsert": {
            "id": "DbInsert",
            "inputs": {
                "doc": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "ok": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "err": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nlog('Going to insert doc')\nconst {onError} = adv;\n\ndb.insert(inputs.doc)\n    .then((doc) => {\n        log('Inserted doc')\n        outputs.ok.next(doc)\n    }, (err) => {\n        log('Failed to insert doc')\n        outputs.err.next(err);\n        onError(err);\n    });\n",
            "controlled": false
        },
        "DbFindOne": {
            "id": "DbFindOne",
            "inputs": {
                "query": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "res": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\ndb.findOne(inputs.query)\n    .then((doc) => {\n        if (isDefined(doc)) {\n            outputs.res.next(doc)\n        } else {\n            adv.onError('Not found');\n        }\n    })\n    .catch((err) => adv.onError(err))",
            "controlled": false,
            "completionOutputs": [
                "res"
            ]
        },
        "DbUpdate": {
            "id": "DbUpdate",
            "inputs": {
                "query": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "update": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "options": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "ok": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "err": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {query, update, options} = inputs;\nconst {ok, err} = outputs;\ndb.update(query, update, options)\n    .then((doc) => ok.next(doc))\n    .catch((e) => err.next(e));",
            "controlled": false
        },
        "DbRemove": {
            "id": "DbRemove",
            "inputs": {
                "query": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "options": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "ok": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "err": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {query, options} = inputs;\nconst {onError} = adv;\n\ndb.remove(query, isDefined(options) ? options : {})\n.then((num) => outputs.ok.next(num))\n.catch((err) => {\n    outputs.err.next(err)\n    onError(err);\n});\n\n",
            "controlled": false
        },
        "SetItem": {
            "id": "SetItem",
            "inputs": {
                "key": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "value": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "ok": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\n\nconst {key, value} = inputs;\nmongoDb.collection('__KVStore').updateOne({id: key}, {$set: {value}}, {upsert: true})\n    .then(() => outputs.ok.next(value))\n    .catch((err) => adv.onError(err));",
            "controlled": false,
            "completionOutputs": [
                "ok"
            ]
        },
        "GetItem": {
            "id": "GetItem",
            "inputs": {
                "key": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "defaultValue": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "ok": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {ok, err} = outputs;\nconst {key, defaultValue} = inputs;\nconst {onError} = adv;\n\nmongoDb.collection('__KVStore').findOne({id: key})\n    .then((doc) => {\n        if (doc === null) {\n            if (isDefined(defaultValue)) {\n                ok.next(defaultValue);\n            } else {\n                onError(new Error('Key not found and no default value'));\n            }\n        } else {\n            ok.next(doc.value);\n        }\n    })\n    .catch((e) => {\n        onError(e);\n    });",
            "controlled": false,
            "completionOutputs": [
                "ok"
            ]
        },
        "HOP_scan-588_onValue": {
            "id": "HOP_scan-588_onValue",
            "outputsPosition": {
                "newVal": {
                    "x": 22.727290129703565,
                    "y": 264.5454696851694
                }
            },
            "inputsPosition": {
                "currValue": {
                    "x": -80.9090852500531,
                    "y": -181.81817917601782
                },
                "prevValue": {
                    "x": 150.00000071748116,
                    "y": -160.00000039611518
                }
            },
            "inputs": {
                "prevValue": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "currValue": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "newVal": {
                    "type": "any",
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Id-184",
                    "partId": "Id",
                    "inputConfig": {},
                    "pos": {
                        "x": 62.3,
                        "y": 119.27000000000001
                    }
                },
                {
                    "id": "concat-809",
                    "partId": "ConcatList",
                    "inputConfig": {},
                    "pos": {
                        "x": 66.00348999023436,
                        "y": -12.730777587890628
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "concat-809",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Id-184",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "prevValue"
                    },
                    "to": {
                        "insId": "concat-809",
                        "pinId": "b"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "currValue"
                    },
                    "to": {
                        "insId": "concat-809",
                        "pinId": "a"
                    }
                },
                {
                    "from": {
                        "insId": "Id-184",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "newVal"
                    }
                }
            ]
        },
        "concat": {
            "id": "concat",
            "inputs": {
                "a": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "b": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "object",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "\n          let val = '\"${a}${b}\"';\n\n          Object.keys(inputs).forEach((key) => {\n\n            const _inpVal = inputs[key]; \n            const inpVal = typeof _inpVal === 'object' ? JSON.stringify(_inpVal) : _inpVal;\n\n            val = val\n              .replace('${' + key + '}', inpVal)\n              .replace('${' + key + '}', inpVal)\n              .replace('${' + key + '}', inpVal) // todo - support more than 3 instances in a nicer way\n          })\n          outputs.r.next(JSON.parse(val));",
            "completionOutputs": [
                "r"
            ]
        },
        "HtmlTag": {
            "id": "HtmlTag",
            "inputs": {
                "id": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "style": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "className": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "tagName": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "extra": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "children": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "jsx": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "click": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst props = {\n    className: inputs.className,\n    id: inputs.id,\n    style: inputs.style\n}\n\nconst onClick = outputs.click ? (e) => outputs.click.next(e) : undefined;\nconst comp = React.createElement(inputs.tagName, {\n    ...props,\n    ...(inputs.extra || {}),\n    onClick\n}, inputs.children);\n\noutputs.jsx.next(comp);",
            "controlled": false
        },
        "HtmlDiv": {
            "id": "HtmlDiv",
            "inputs": {
                "children": {
                    "type": "any",
                    "optional": true,
                    "mode": "required-if-connected"
                },
                "className": {
                    "type": "any",
                    "optional": true,
                    "mode": "required-if-connected"
                },
                "style": {
                    "type": "any",
                    "optional": true,
                    "mode": "required-if-connected"
                },
                "extra": {
                    "type": "any",
                    "optional": true,
                    "mode": "required-if-connected"
                },
                "id": {
                    "type": "any",
                    "optional": true,
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "jsx": {
                    "type": "any",
                    "optional": false
                },
                "click": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "HtmlTag-344",
                    "partId": "HtmlTag",
                    "inputConfig": {
                        "tagName": {
                            "mode": "static",
                            "value": "div"
                        },
                        "children": {
                            "mode": "sticky"
                        },
                        "style": {
                            "mode": "sticky"
                        },
                        "className": {
                            "mode": "sticky"
                        },
                        "id": {
                            "mode": "sticky"
                        },
                        "extra": {
                            "mode": "sticky"
                        }
                    },
                    "pos": {
                        "x": -145.77105590820312,
                        "y": 179.20621673583986
                    }
                }
            ],
            "inputsPosition": {
                "children": {
                    "x": 427.3633539266118,
                    "y": 18.715560526434157
                },
                "className": {
                    "x": 125.53247872890218,
                    "y": -150.5820854782434
                },
                "style": {
                    "x": 6.369978695950669,
                    "y": -133.3790971249036
                },
                "extra": {
                    "x": 252.07,
                    "y": -122.33
                },
                "id": {
                    "x": -122.62204563520304,
                    "y": -108.81117537434996
                }
            },
            "outputsPosition": {
                "jsx": {
                    "x": 0,
                    "y": 400
                },
                "click": {
                    "x": 178.6462610269776,
                    "y": 423.83950155636643
                },
                "style": {
                    "x": 1.46,
                    "y": -24.05
                }
            },
            "connections": [
                {
                    "from": {
                        "insId": "HtmlTag-344",
                        "pinId": "jsx"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "jsx"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "style"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "style"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "className"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "className"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "children"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "children"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "extra"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "extra"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "id"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "id"
                    }
                },
                {
                    "from": {
                        "insId": "HtmlTag-344",
                        "pinId": "click"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "click"
                    }
                }
            ]
        },
        "HtmlSpan": {
            "id": "HtmlSpan",
            "inputs": {
                "children": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "className": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "style": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "extra": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "id": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "jsx": {
                    "type": "any",
                    "optional": false
                },
                "click": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "HtmlTag-344",
                    "partId": "HtmlTag",
                    "inputConfig": {
                        "tagName": {
                            "mode": "static",
                            "value": "span"
                        },
                        "children": {
                            "mode": "sticky"
                        }
                    },
                    "pos": {
                        "x": -145.77105590820312,
                        "y": 179.20621673583986
                    }
                }
            ],
            "inputsPosition": {
                "children": {
                    "x": 427.3633539266118,
                    "y": 18.715560526434157
                },
                "className": {
                    "x": 79.49840810022538,
                    "y": -190.6116525494369
                },
                "style": {
                    "x": -115.72005229266348,
                    "y": -241.4589222372525
                },
                "extra": {
                    "x": 250.068522112266,
                    "y": -182.374320409234
                },
                "id": {
                    "x": -248.71519834765635,
                    "y": -202.88061148563915
                }
            },
            "outputsPosition": {
                "jsx": {
                    "x": -150.11084357782397,
                    "y": 424.0177174689956
                },
                "click": {
                    "x": 178.6462610269776,
                    "y": 423.83950155636643
                },
                "style": {
                    "x": 1.46,
                    "y": -24.05
                }
            },
            "connections": [
                {
                    "from": {
                        "insId": "HtmlTag-344",
                        "pinId": "jsx"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "jsx"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "style"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "style"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "className"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "className"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "children"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "children"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "extra"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "extra"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "id"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "id"
                    }
                },
                {
                    "from": {
                        "insId": "HtmlTag-344",
                        "pinId": "click"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "click"
                    }
                }
            ]
        },
        "HtmlH1": {
            "id": "HtmlH1",
            "inputs": {
                "children": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "className": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "style": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "extra": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "id": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "jsx": {
                    "type": "any",
                    "optional": false
                },
                "click": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "HtmlTag-344",
                    "partId": "HtmlTag",
                    "inputConfig": {
                        "tagName": {
                            "mode": "static",
                            "value": "h1"
                        },
                        "children": {
                            "mode": "sticky"
                        }
                    },
                    "pos": {
                        "x": -145.77105590820312,
                        "y": 179.20621673583986
                    }
                }
            ],
            "inputsPosition": {
                "children": {
                    "x": 427.3633539266118,
                    "y": 18.715560526434157
                },
                "className": {
                    "x": 79.49840810022538,
                    "y": -190.6116525494369
                },
                "style": {
                    "x": -115.72005229266348,
                    "y": -241.4589222372525
                },
                "extra": {
                    "x": 250.068522112266,
                    "y": -182.374320409234
                },
                "id": {
                    "x": -248.71519834765635,
                    "y": -202.88061148563915
                }
            },
            "outputsPosition": {
                "jsx": {
                    "x": -150.11084357782397,
                    "y": 424.0177174689956
                },
                "click": {
                    "x": 178.6462610269776,
                    "y": 423.83950155636643
                },
                "style": {
                    "x": 1.46,
                    "y": -24.05
                }
            },
            "connections": [
                {
                    "from": {
                        "insId": "HtmlTag-344",
                        "pinId": "jsx"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "jsx"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "style"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "style"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "className"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "className"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "children"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "children"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "extra"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "extra"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "id"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "id"
                    }
                },
                {
                    "from": {
                        "insId": "HtmlTag-344",
                        "pinId": "click"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "click"
                    }
                }
            ]
        },
        "HtmlBtn": {
            "id": "HtmlBtn",
            "inputs": {
                "children": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "className": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "style": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "extra": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "id": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "jsx": {
                    "type": "any",
                    "optional": false
                },
                "click": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "HtmlTag-344",
                    "partId": "HtmlTag",
                    "inputConfig": {
                        "tagName": {
                            "mode": "static",
                            "value": "button"
                        },
                        "children": {
                            "mode": "sticky"
                        }
                    },
                    "pos": {
                        "x": -145.77105590820312,
                        "y": 179.20621673583986
                    }
                }
            ],
            "inputsPosition": {
                "children": {
                    "x": 427.3633539266118,
                    "y": 18.715560526434157
                },
                "className": {
                    "x": 79.49840810022538,
                    "y": -190.6116525494369
                },
                "style": {
                    "x": -115.72005229266348,
                    "y": -241.4589222372525
                },
                "extra": {
                    "x": 250.068522112266,
                    "y": -182.374320409234
                },
                "id": {
                    "x": -248.71519834765635,
                    "y": -202.88061148563915
                }
            },
            "outputsPosition": {
                "jsx": {
                    "x": -150.11084357782397,
                    "y": 424.0177174689956
                },
                "click": {
                    "x": 178.6462610269776,
                    "y": 423.83950155636643
                },
                "style": {
                    "x": 1.46,
                    "y": -24.05
                }
            },
            "connections": [
                {
                    "from": {
                        "insId": "HtmlTag-344",
                        "pinId": "jsx"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "jsx"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "style"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "style"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "className"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "className"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "children"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "children"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "extra"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "extra"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "id"
                    },
                    "to": {
                        "insId": "HtmlTag-344",
                        "pinId": "id"
                    }
                },
                {
                    "from": {
                        "insId": "HtmlTag-344",
                        "pinId": "click"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "click"
                    }
                }
            ]
        },
        "HtmlValueTag": {
            "id": "HtmlValueTag",
            "inputs": {
                "id": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "style": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "className": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "tagName": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "extra": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "children": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "value": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "placeholder": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "jsx": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "click": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "change": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst props = {\n    className: inputs.className,\n    id: inputs.id,\n    style: inputs.style\n}\n\nconst onClick = outputs.click ? (e) => outputs.click.next(e) : undefined;\nconst onChange = outputs.change ? (e) => outputs.change.next(e.target.value) : undefined;\nconst comp = React.createElement(inputs.tagName, {\n    ...props,\n    ...(inputs.extra || {}),\n    onClick,\n    onChange\n}, inputs.children);\n\noutputs.jsx.next(comp);",
            "controlled": false
        },
        "HtmlInput": {
            "id": "HtmlInput",
            "inputs": {
                "children": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "className": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "style": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "extra": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "id": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "value": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "placeholder": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "jsx": {
                    "type": "any",
                    "optional": false
                },
                "click": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "change": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "HtmlValueTag-866",
                    "partId": "HtmlValueTag",
                    "inputConfig": {
                        "tagName": {
                            "mode": "static",
                            "value": "input"
                        }
                    },
                    "pos": {
                        "x": -193.14,
                        "y": 182.22
                    }
                }
            ],
            "inputsPosition": {
                "children": {
                    "x": 198.04206479406017,
                    "y": -245.99481931731708
                },
                "className": {
                    "x": -69.13582255860676,
                    "y": -142.48246371581018
                },
                "style": {
                    "x": -115.72005229266348,
                    "y": -241.4589222372525
                },
                "extra": {
                    "x": 57.55185097680204,
                    "y": -275.801503518959
                },
                "id": {
                    "x": -248.71519834765635,
                    "y": -202.88061148563915
                },
                "value": {
                    "x": 363.0011568408785,
                    "y": -131.47162384065362
                },
                "placeholder": {
                    "x": 460.0736230110707,
                    "y": -143.54132159541848
                }
            },
            "outputsPosition": {
                "jsx": {
                    "x": -150.11084357782397,
                    "y": 424.0177174689956
                },
                "click": {
                    "x": -37.93502806156163,
                    "y": 435.1639936674112
                },
                "style": {
                    "x": 1.46,
                    "y": -24.05
                },
                "change": {
                    "x": 167.6133118501262,
                    "y": 375.5068672388183
                }
            },
            "connections": [
                {
                    "from": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "change"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "change"
                    }
                },
                {
                    "from": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "click"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "click"
                    }
                },
                {
                    "from": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "jsx"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "jsx"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "value"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "value"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "children"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "children"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "className"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "className"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "id"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "id"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "style"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "style"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "extra"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "extra"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "placeholder"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "placeholder"
                    }
                }
            ]
        },
        "HtmlTextarea": {
            "id": "HtmlTextarea",
            "inputs": {
                "children": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "className": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "style": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "extra": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "id": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "value": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "placeholder": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "jsx": {
                    "type": "any",
                    "optional": false
                },
                "click": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "change": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "HtmlValueTag-866",
                    "partId": "HtmlValueTag",
                    "inputConfig": {
                        "tagName": {
                            "mode": "static",
                            "value": "textarea"
                        }
                    },
                    "pos": {
                        "x": -193.14,
                        "y": 182.22
                    }
                }
            ],
            "inputsPosition": {
                "children": {
                    "x": 198.04206479406017,
                    "y": -245.99481931731708
                },
                "className": {
                    "x": -69.13582255860676,
                    "y": -142.48246371581018
                },
                "style": {
                    "x": -115.72005229266348,
                    "y": -241.4589222372525
                },
                "extra": {
                    "x": 57.55185097680204,
                    "y": -275.801503518959
                },
                "id": {
                    "x": -248.71519834765635,
                    "y": -202.88061148563915
                },
                "value": {
                    "x": 363.0011568408785,
                    "y": -131.47162384065362
                },
                "placeholder": {
                    "x": 460.0736230110707,
                    "y": -143.54132159541848
                }
            },
            "outputsPosition": {
                "jsx": {
                    "x": -150.11084357782397,
                    "y": 424.0177174689956
                },
                "click": {
                    "x": -37.93502806156163,
                    "y": 435.1639936674112
                },
                "style": {
                    "x": 1.46,
                    "y": -24.05
                },
                "change": {
                    "x": 167.6133118501262,
                    "y": 375.5068672388183
                }
            },
            "connections": [
                {
                    "from": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "change"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "change"
                    }
                },
                {
                    "from": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "click"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "click"
                    }
                },
                {
                    "from": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "jsx"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "jsx"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "value"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "value"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "children"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "children"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "className"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "className"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "id"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "id"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "style"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "style"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "extra"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "extra"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "placeholder"
                    },
                    "to": {
                        "insId": "HtmlValueTag-866",
                        "pinId": "placeholder"
                    }
                }
            ]
        },
        "HeadCSS": {
            "id": "HeadCSS",
            "inputs": {
                "css": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "key": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {},
            "fnCode": "try {\n    const document = getDocument();\n    const normKey = inputs.key || \"default-css\";\n    const tag = document.createElement(\"style\");\n    tag.innerHTML = inputs.css;\n    tag.id = normKey;\n    \n    const existing = document.getElementById(normKey);\n    if (existing) {\n      existing.remove();\n    }\n    document.head.appendChild(tag);\n} catch (e) {\n    log(`Unable to run head css part`, e);\n}",
            "controlled": false
        },
        "Subscribe": {
            "id": "Subscribe",
            "inputs": {
                "key": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "val": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst token = PubSub.subscribe(inputs.key, (_, data) => {\n    outputs.val.next(data);\n});\n\nadv.onCleanup(() => {\n    log('Unsubscribing!');\n    PubSub.unsubscribe(token);\n});",
            "controlled": false,
            "completionOutputs": [
                "never"
            ]
        },
        "Publish": {
            "id": "Publish",
            "inputs": {
                "key": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "value": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {},
            "fnCode": "// magic here\n\nPubSub.publish(inputs.key, inputs.value);",
            "controlled": false
        },
        "ListFrom2": {
            "id": "ListFrom2",
            "inputs": {
                "item1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "item2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "list": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\noutputs.list.next(\n    [\n        inputs.item1,\n        inputs.item2\n    ]\n);",
            "controlled": false,
            "completionOutputs": [
                "list"
            ]
        },
        "ListFrom3": {
            "id": "ListFrom3",
            "inputs": {
                "item1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "item2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "item3": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "list": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\noutputs.list.next(\n    [\n        inputs.item1,\n        inputs.item2,\n        inputs.item3\n    ]\n);",
            "controlled": false,
            "completionOutputs": [
                "list"
            ]
        },
        "EmptyList": {
            "id": "EmptyList",
            "inputs": {},
            "outputs": {
                "list": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\noutputs.list.next(\n    []\n);",
            "controlled": false,
            "completionOutputs": [
                "list"
            ]
        },
        "ListFromStr": {
            "id": "ListFromStr",
            "inputs": {
                "count": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "char": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\n\noutputs\n    .r\n    .next(new Array(inputs.count).fill(inputs.char));",
            "controlled": false,
            "completionOutputs": [
                "r"
            ]
        },
        "GetListItem": {
            "id": "GetListItem",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "idx": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\noutputs.r.next(inputs.list[inputs.idx]);",
            "controlled": false,
            "completionOutputs": [
                "r"
            ]
        },
        "ListAppend": {
            "id": "ListAppend",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "item": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here// magic here\noutputs.r.next(\n    [...inputs.list, inputs.item]\n);",
            "controlled": false,
            "completionOutputs": [
                "r"
            ]
        },
        "ListPrepend": {
            "id": "ListPrepend",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "item": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here// magic here\noutputs.r.next(\n    [inputs.item, ...inputs.list]\n);",
            "controlled": false,
            "completionOutputs": [
                "r"
            ]
        },
        "SpreadList": {
            "id": "SpreadList",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "length": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "idx": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "val": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst { list } = inputs;\nconst { val, idx, length } = outputs;\nlength.next(list.length);\nlist.forEach((v, i) => {\n    val.next(v);\n    idx.next(i);\n});",
            "controlled": false
        },
        "SliceList": {
            "id": "SliceList",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "begin": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "end": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst { list, begin, end} = inputs;\noutputs.r.next(\n    list.slice(begin, end)\n);",
            "controlled": false,
            "completionOutputs": [
                "r"
            ]
        },
        "ListConcat2": {
            "id": "ListConcat2",
            "inputs": {
                "list1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "list2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {list1, list2} = inputs;\noutputs.r.next(list1.concat(list2));",
            "controlled": false,
            "completionOutputs": [
                "r"
            ]
        },
        "ListFilter": {
            "id": "ListFilter",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "fn": {
                    "type": "part({\"item\": \"any\", \"idx?\": \"any\"}|{\"allow\": \"any\", \"block\": \"any\"})",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const o = outputs;\nconst {list, fn} = inputs;\n\nconst allowSet = new Set();\nconst blockSet = new Set();\nconst newList = [];\n\nconst uns = [];\n\nconst maybeSendNewList = () => {\n  if (allowSet.size + blockSet.size === list.length) {\n    o.r.next(newList.filter((item) => item !== undefined));\n  }\n};\n\nlist.forEach((item, idx) => {\n  const itemInput = dynamicPartInput();\n  const idxInput = dynamicPartInput();\n  const outputs = Object.keys(fn.outputs).reduce(\n    (p, k) => ({ ...p, [k]: dynamicOutput() }),\n    {}\n  );\n  outputs.allow.subscribe(() => {\n    newList.push(item);\n    allowSet.add(idx);\n    maybeSendNewList();\n  });\n\n  outputs.block.subscribe(() => {\n    blockSet.add(idx);\n    maybeSendNewList();\n  });\n\n  Object.keys(outputs)\n    .filter((k) => k !== \"allow\" && k !== \"block\")\n    .forEach((k) => {\n      outputs[k].subscribe(() => {\n        o.rs.next({ key: k, v: item, idx });\n      });\n    });\n  const clean = adv.execute(\n    fn,\n    { item: itemInput, idx: idxInput },\n    outputs,\n    `${adv.insId}-fn`\n  );\n\n  idxInput.subject.next(idx);\n  itemInput.subject.next(item);\n  uns.push(clean);\n});\n\nadv.onCleanup(() => {\n  uns.forEach((fn) => fn());\n});\n",
            "controlled": false,
            "completionOutputs": [
                "r"
            ]
        },
        "HOP_ListFilter-294_fn": {
            "id": "HOP_ListFilter-294_fn",
            "outputsPosition": {
                "block": {
                    "x": -126.83980081384578,
                    "y": 262.03465534285374
                },
                "allow": {
                    "x": 115.1515186446284,
                    "y": 250.21643623868778
                }
            },
            "inputsPosition": {
                "idx": {
                    "x": -116.01732333490163,
                    "y": -75.3246722733323
                },
                "item": {
                    "x": 72.7272804012065,
                    "y": -112.55409799123164
                }
            },
            "inputs": {
                "item": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "idx": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "allow": {
                    "type": "any",
                    "optional": false
                },
                "block": {
                    "type": "any",
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Equals-753",
                    "partId": "Equals",
                    "inputConfig": {
                        "compare": {
                            "mode": "static",
                            "value": 1
                        }
                    },
                    "pos": {
                        "x": 33.272480468750004,
                        "y": 79.25907409667968
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "item"
                    },
                    "to": {
                        "insId": "Equals-753",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "Equals-753",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "block"
                    }
                },
                {
                    "from": {
                        "insId": "Equals-753",
                        "pinId": "else"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "allow"
                    }
                }
            ]
        },
        "HOP_LlistMap-78_fn": {
            "id": "HOP_LlistMap-78_fn",
            "outputsPosition": {
                "rs": {
                    "x": -117.27273855388036,
                    "y": 179.09092315605162
                },
                "r": {
                    "x": 51.81817405089249,
                    "y": 225.45454992140463
                }
            },
            "inputsPosition": {
                "idx": {
                    "x": -59.09091775533694,
                    "y": -175.45454701586416
                },
                "item": {
                    "x": 96.36363336877515,
                    "y": -134.54543856610042
                }
            },
            "inputs": {
                "item": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "idx": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "optional": false
                },
                "rs": {
                    "type": "any",
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Multiply-11",
                    "partId": "Multiply",
                    "inputConfig": {},
                    "pos": {
                        "x": 9.319999999999993,
                        "y": -57.09
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "idx"
                    },
                    "to": {
                        "insId": "Multiply-11",
                        "pinId": "n1"
                    }
                },
                {
                    "from": {
                        "insId": "Multiply-11",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "r"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "item"
                    },
                    "to": {
                        "insId": "Multiply-11",
                        "pinId": "n2"
                    }
                }
            ]
        },
        "ListMap": {
            "id": "ListMap",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "fn": {
                    "type": "part({\"item?\": \"any\", \"idx?\": \"any\"}|{\"r\": \"any\", \"rs\": \"any\"})",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "rs": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "let newList = [];\n\nconst { list, fn} = inputs;\nconst o = outputs;\n\nlet received = new Set();\n\nconst cleanUps = [];\n\nlist.forEach((item, idx) => {\n  const itemInput = dynamicPartInput();\n  const idxInput = dynamicPartInput();\n  const mainOutput = dynamicOutput();\n  const sideOutput = dynamicOutput();\n  mainOutput.subscribe((receivedItem) => {\n    newList[idx] = receivedItem;\n    received.add(idx);\n    if (received.size === list.length) {\n      o.r.next(newList);\n    }\n  });\n\n  sideOutput.subscribe((v) => {\n    o.rs.next(v);\n  });\n\n  const clean = adv.execute(\n    fn,\n    { item: itemInput, idx: idxInput },\n    { r: mainOutput, rs: sideOutput },\n    `${adv.insId}-fn`\n  );\n\n  cleanUps.push(clean);\n\n  itemInput.subject.next(item);\n  idxInput.subject.next(idx);\n});\n\nif (list.length === 0) {\n  o.r.next(list);\n}\n\nadv.onCleanup(() => {\n  cleanUps.forEach((fn) => fn());\n});\n",
            "controlled": false
        },
        "ScanValue": {
            "id": "ScanValue",
            "inputs": {
                "value": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "initial": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "onValue": {
                    "type": "part({\"prevValue\": \"any\", \"currValue\": \"any\"}|{\"newVal\": \"any\"})",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { state, insId, execute, onCleanup, onArg } = adv;\nconst {initial, value, onValue } = inputs;\nconst {r} = outputs;\n\nconst prevValue = state.get(\"prevValue\") || initial;\n  \nconst newVal = dynamicOutput();\nconst prevValueArg = dynamicPartInput();\nconst currValue = dynamicPartInput();\nconst clean = execute(\nonValue,\n{ prevValue: prevValueArg, currValue },\n{ newVal },\n`${insId}-scan`\n);\n\nlog({value, prevValue});\n\nconst s = newVal.subscribe((val) => {\n    state.set(\"prevValue\", val);\n    r.next(val);\n    s.unsubscribe();\n    clean();\n});\n\ncurrValue.subject.next(value);\nprevValueArg.subject.next(prevValue);\n\n",
            "controlled": false,
            "reactiveInputs": [
                "value"
            ],
            "completionOutputs": [
                "none"
            ]
        },
        "HOP_ScanValue-284_onValue": {
            "id": "HOP_ScanValue-284_onValue",
            "outputsPosition": {
                "newVal": {
                    "x": -25.454545454545453,
                    "y": 182.72726516093104
                }
            },
            "inputsPosition": {
                "currValue": {
                    "x": -80.00001534301744,
                    "y": -230.90908896113217
                },
                "prevValue": {
                    "x": 244.5454744314122,
                    "y": -175.4545333326883
                }
            },
            "inputs": {
                "prevValue": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "currValue": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "newVal": {
                    "type": "any",
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Add-110",
                    "partId": "Add",
                    "inputConfig": {},
                    "pos": {
                        "x": 18.159999999999997,
                        "y": -68.91
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "prevValue"
                    },
                    "to": {
                        "insId": "Add-110",
                        "pinId": "n2"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "currValue"
                    },
                    "to": {
                        "insId": "Add-110",
                        "pinId": "n1"
                    }
                },
                {
                    "from": {
                        "insId": "Add-110",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "newVal"
                    }
                }
            ]
        },
        "SpreadListDelayed": {
            "id": "SpreadListDelayed",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "val": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "idx": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "length": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst { list } = inputs;\nconst { val, idx, length } = outputs;\nlength.next(list.length);\nlist.forEach((v, i) => {\n    setTimeout(() => {\n        val.next(v);\n        idx.next(i);\n    }, 100 * idx);\n});",
            "controlled": false
        },
        "MD5HashString": {
            "id": "MD5HashString",
            "inputs": {
                "str": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "function md5cycle(x, k) {\n  var a = x[0],\n    b = x[1],\n    c = x[2],\n    d = x[3];\n\n  a = ff(a, b, c, d, k[0], 7, -680876936);\n  d = ff(d, a, b, c, k[1], 12, -389564586);\n  c = ff(c, d, a, b, k[2], 17, 606105819);\n  b = ff(b, c, d, a, k[3], 22, -1044525330);\n  a = ff(a, b, c, d, k[4], 7, -176418897);\n  d = ff(d, a, b, c, k[5], 12, 1200080426);\n  c = ff(c, d, a, b, k[6], 17, -1473231341);\n  b = ff(b, c, d, a, k[7], 22, -45705983);\n  a = ff(a, b, c, d, k[8], 7, 1770035416);\n  d = ff(d, a, b, c, k[9], 12, -1958414417);\n  c = ff(c, d, a, b, k[10], 17, -42063);\n  b = ff(b, c, d, a, k[11], 22, -1990404162);\n  a = ff(a, b, c, d, k[12], 7, 1804603682);\n  d = ff(d, a, b, c, k[13], 12, -40341101);\n  c = ff(c, d, a, b, k[14], 17, -1502002290);\n  b = ff(b, c, d, a, k[15], 22, 1236535329);\n\n  a = gg(a, b, c, d, k[1], 5, -165796510);\n  d = gg(d, a, b, c, k[6], 9, -1069501632);\n  c = gg(c, d, a, b, k[11], 14, 643717713);\n  b = gg(b, c, d, a, k[0], 20, -373897302);\n  a = gg(a, b, c, d, k[5], 5, -701558691);\n  d = gg(d, a, b, c, k[10], 9, 38016083);\n  c = gg(c, d, a, b, k[15], 14, -660478335);\n  b = gg(b, c, d, a, k[4], 20, -405537848);\n  a = gg(a, b, c, d, k[9], 5, 568446438);\n  d = gg(d, a, b, c, k[14], 9, -1019803690);\n  c = gg(c, d, a, b, k[3], 14, -187363961);\n  b = gg(b, c, d, a, k[8], 20, 1163531501);\n  a = gg(a, b, c, d, k[13], 5, -1444681467);\n  d = gg(d, a, b, c, k[2], 9, -51403784);\n  c = gg(c, d, a, b, k[7], 14, 1735328473);\n  b = gg(b, c, d, a, k[12], 20, -1926607734);\n\n  a = hh(a, b, c, d, k[5], 4, -378558);\n  d = hh(d, a, b, c, k[8], 11, -2022574463);\n  c = hh(c, d, a, b, k[11], 16, 1839030562);\n  b = hh(b, c, d, a, k[14], 23, -35309556);\n  a = hh(a, b, c, d, k[1], 4, -1530992060);\n  d = hh(d, a, b, c, k[4], 11, 1272893353);\n  c = hh(c, d, a, b, k[7], 16, -155497632);\n  b = hh(b, c, d, a, k[10], 23, -1094730640);\n  a = hh(a, b, c, d, k[13], 4, 681279174);\n  d = hh(d, a, b, c, k[0], 11, -358537222);\n  c = hh(c, d, a, b, k[3], 16, -722521979);\n  b = hh(b, c, d, a, k[6], 23, 76029189);\n  a = hh(a, b, c, d, k[9], 4, -640364487);\n  d = hh(d, a, b, c, k[12], 11, -421815835);\n  c = hh(c, d, a, b, k[15], 16, 530742520);\n  b = hh(b, c, d, a, k[2], 23, -995338651);\n\n  a = ii(a, b, c, d, k[0], 6, -198630844);\n  d = ii(d, a, b, c, k[7], 10, 1126891415);\n  c = ii(c, d, a, b, k[14], 15, -1416354905);\n  b = ii(b, c, d, a, k[5], 21, -57434055);\n  a = ii(a, b, c, d, k[12], 6, 1700485571);\n  d = ii(d, a, b, c, k[3], 10, -1894986606);\n  c = ii(c, d, a, b, k[10], 15, -1051523);\n  b = ii(b, c, d, a, k[1], 21, -2054922799);\n  a = ii(a, b, c, d, k[8], 6, 1873313359);\n  d = ii(d, a, b, c, k[15], 10, -30611744);\n  c = ii(c, d, a, b, k[6], 15, -1560198380);\n  b = ii(b, c, d, a, k[13], 21, 1309151649);\n  a = ii(a, b, c, d, k[4], 6, -145523070);\n  d = ii(d, a, b, c, k[11], 10, -1120210379);\n  c = ii(c, d, a, b, k[2], 15, 718787259);\n  b = ii(b, c, d, a, k[9], 21, -343485551);\n\n  x[0] = add32(a, x[0]);\n  x[1] = add32(b, x[1]);\n  x[2] = add32(c, x[2]);\n  x[3] = add32(d, x[3]);\n}\n\nfunction cmn(q, a, b, x, s, t) {\n  a = add32(add32(a, q), add32(x, t));\n  return add32((a << s) | (a >>> (32 - s)), b);\n}\n\nfunction ff(a, b, c, d, x, s, t) {\n  return cmn((b & c) | (~b & d), a, b, x, s, t);\n}\n\nfunction gg(a, b, c, d, x, s, t) {\n  return cmn((b & d) | (c & ~d), a, b, x, s, t);\n}\n\nfunction hh(a, b, c, d, x, s, t) {\n  return cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction ii(a, b, c, d, x, s, t) {\n  return cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nfunction md51(s) {\n  txt = \"\";\n  var n = s.length,\n    state = [1732584193, -271733879, -1732584194, 271733878],\n    i;\n  for (i = 64; i <= s.length; i += 64) {\n    md5cycle(state, md5blk(s.substring(i - 64, i)));\n  }\n  s = s.substring(i - 64);\n  var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  for (i = 0; i < s.length; i++)\n    tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);\n  tail[i >> 2] |= 0x80 << (i % 4 << 3);\n  if (i > 55) {\n    md5cycle(state, tail);\n    for (i = 0; i < 16; i++) tail[i] = 0;\n  }\n  tail[14] = n * 8;\n  md5cycle(state, tail);\n  return state;\n}\n\n/* there needs to be support for Unicode here,\n * unless we pretend that we can redefine the MD-5\n * algorithm for multi-byte characters (perhaps\n * by adding every four 16-bit characters and\n * shortening the sum to 32 bits). Otherwise\n * I suggest performing MD-5 as if every character\n * was two bytes--e.g., 0040 0025 = @%--but then\n * how will an ordinary MD-5 sum be matched?\n * There is no way to standardize text to something\n * like UTF-8 before transformation; speed cost is\n * utterly prohibitive. The JavaScript standard\n * itself needs to look at this: it should start\n * providing access to strings as preformed UTF-8\n * 8-bit unsigned value arrays.\n */\nfunction md5blk(s) {\n  /* I figured global was faster.   */\n  var md5blks = [],\n    i; /* Andy King said do it this way. */\n  for (i = 0; i < 64; i += 4) {\n    md5blks[i >> 2] =\n      s.charCodeAt(i) +\n      (s.charCodeAt(i + 1) << 8) +\n      (s.charCodeAt(i + 2) << 16) +\n      (s.charCodeAt(i + 3) << 24);\n  }\n  return md5blks;\n}\n\nvar hex_chr = \"0123456789abcdef\".split(\"\");\n\nfunction rhex(n) {\n  var s = \"\",\n    j = 0;\n  for (; j < 4; j++)\n    s += hex_chr[(n >> (j * 8 + 4)) & 0x0f] + hex_chr[(n >> (j * 8)) & 0x0f];\n  return s;\n}\n\nfunction hex(x) {\n  for (var i = 0; i < x.length; i++) x[i] = rhex(x[i]);\n  return x.join(\"\");\n}\n\nfunction md5(s) {\n  return hex(md51(s));\n}\n\nfunction add32(a, b) {\n  return (a + b) & 0xffffffff;\n}\n\noutputs.r.next(md5(inputs.str));\n",
            "controlled": false,
            "completionOutputs": [
                "r"
            ]
        },
        "SpreadList5": {
            "id": "SpreadList5",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "first": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "second": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "rest": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { list } = inputs;\nconst { first, second, rest } = outputs;\n      \nconst [f, s, r] = list;\n\nf && first.next(f);\ns && second.next(s);\n\nr.length && rest.next(r)\n      "
        },
        "PropertyEquals": {
            "id": "PropertyEquals",
            "inputs": {
                "obj": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "key": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "compare": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "equals": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "notEquals": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "error": {
                    "type": "error",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Pick-736",
                    "partId": "Pick",
                    "inputConfig": {},
                    "pos": {
                        "x": -540.8173352050782,
                        "y": 80.57646270751954
                    }
                },
                {
                    "id": "Equals-553",
                    "partId": "Equals",
                    "inputConfig": {},
                    "pos": {
                        "x": -509.89554931640623,
                        "y": 338.29360092163085
                    }
                },
                {
                    "id": "Accumulate-111",
                    "partId": "Accumulate",
                    "inputConfig": {},
                    "pos": {
                        "x": -903.08,
                        "y": -192.68
                    }
                },
                {
                    "id": "SpreadList-818",
                    "partId": "SpreadList",
                    "inputConfig": {},
                    "pos": {
                        "x": -2042.07,
                        "y": -466.77
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "obj"
                    },
                    "to": {
                        "insId": "Pick-736",
                        "pinId": "obj"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "key"
                    },
                    "to": {
                        "insId": "Pick-736",
                        "pinId": "key"
                    }
                },
                {
                    "from": {
                        "insId": "Pick-736",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Equals-553",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "compare"
                    },
                    "to": {
                        "insId": "Equals-553",
                        "pinId": "compare"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "obj"
                    },
                    "to": {
                        "insId": "Equals-553",
                        "pinId": "transform"
                    }
                },
                {
                    "from": {
                        "insId": "Equals-553",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "equals"
                    }
                },
                {
                    "from": {
                        "insId": "Equals-553",
                        "pinId": "else"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "notEquals"
                    }
                },
                {
                    "from": {
                        "insId": "Pick-736",
                        "pinId": "e"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "error"
                    }
                }
            ],
            "controlled": false,
            "inputsPosition": {
                "obj": {
                    "x": -229.71612412651234,
                    "y": -167.03398228235105
                },
                "key": {
                    "x": -443.47558318979617,
                    "y": -398.5833507770054
                },
                "compare": {
                    "x": -322.17824497391484,
                    "y": -389.9386987690251
                }
            },
            "outputsPosition": {
                "equals": {
                    "x": -455.0930418816584,
                    "y": 671.4762934787418
                },
                "notEquals": {
                    "x": -235.29395392100537,
                    "y": 652.0438016945807
                },
                "error": {
                    "x": 2.280335052544504,
                    "y": 645.8189385408034
                }
            }
        },
        "StringIncludes": {
            "id": "StringIncludes",
            "inputs": {
                "str": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "strToFind": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "else": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { str, strToFind } = inputs;\nconst { r } = outputs;\n        \n// magic here\nif (str.includes(strToFind)) {\n    r.next(str);\n}  else {\n    outputs['else'].next(str);\n}",
            "customViewCode": ""
        },
        "ListJoin": {
            "id": "ListJoin",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "delimiter": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { list, delimiter } = inputs;\nconst { r } = outputs;\n        \n// magic here\nr.next(list.join(delimiter));",
            "completionOutputs": [
                "r"
            ]
        },
        "StringAppend": {
            "id": "StringAppend",
            "inputs": {
                "str": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "strToAppend": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here// magic here\noutputs.r.next(`${inputs.str}${inputs.strToAppend}`);",
            "controlled": false,
            "completionOutputs": [
                "r"
            ]
        },
        "ListLength": {
            "id": "ListLength",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "length": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\noutputs.length.next(inputs.list.length);",
            "controlled": false,
            "completionOutputs": [
                "length"
            ]
        },
        "isLess": {
            "id": "isLess",
            "inputs": {
                "n1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "n2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "true": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "false": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { n1, n2 } = inputs;\n      \nif (n1 < n2) {\n      outputs.true.next(n1);\n} else {\n      outputs.false.next(n1);\n}\n// magic here\n      ",
            "customViewCode": "",
            "completionOutputs": [
                "true",
                "false"
            ]
        },
        "MathMin": {
            "id": "MathMin",
            "inputs": {
                "n1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "n2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { n1, n2 } = inputs;\n      \noutputs.r.next(Math.min(n1, n2));\n// magic here\n      ",
            "completionOutputs": [
                "r"
            ]
        },
        "Delay2": {
            "id": "Delay2",
            "inputs": {
                "value": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "ms": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {value, ms} = inputs;\n const timer = setTimeout(() => {\n    outputs.r.next(value);\n}, ms);\n\nadv.onCleanup(() => clearTimeout(timer));",
            "controlled": false,
            "customViewCode": "",
            "completionOutputs": [
                "r"
            ]
        },
        "Repeat": {
            "id": "Repeat",
            "inputs": {
                "val": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "count": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {val, count} = inputs;\nconst {r} = outputs;\n\nfor (let i = 0; i < count; i++) {\n    r.next(val);\n}\n",
            "controlled": false,
            "completionOutputs": [
                "r"
            ]
        },
        "SetState": {
            "id": "SetState",
            "inputs": {
                "key": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "value": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const {state} = adv;\nconst {key, value} = inputs;\n\nstate.set(key, value);\noutputs.r.next(value);\n\n",
            "controlled": false
        },
        "GetState": {
            "id": "GetState",
            "inputs": {
                "key": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "err": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const {state} = adv;\nconst {key} = inputs;\nconst {r, err} = outputs;\n\nconst val = state.get(key);\nif (isDefined(val)) {\n    r.next(val);\n} else {\n    err.next(key);\n}\n",
            "controlled": false
        },
        "HasProperty": {
            "id": "HasProperty",
            "inputs": {
                "obj": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "key": {
                    "type": "string",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "yes": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "no": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "value": {
                    "type": "obj",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Pick-631",
                    "partId": "Pick",
                    "inputConfig": {},
                    "pos": {
                        "x": 79.93398437500002,
                        "y": 178.49835540771483
                    }
                },
                {
                    "id": "Transform-244",
                    "partId": "Transform",
                    "inputConfig": {},
                    "pos": {
                        "x": -147.15357177734376,
                        "y": 321.90995727539064
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "key"
                    },
                    "to": {
                        "insId": "Pick-631",
                        "pinId": "key"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "obj"
                    },
                    "to": {
                        "insId": "Pick-631",
                        "pinId": "obj"
                    }
                },
                {
                    "from": {
                        "insId": "Pick-631",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Transform-244",
                        "pinId": "from"
                    }
                },
                {
                    "from": {
                        "insId": "Transform-244",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "yes"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "obj"
                    },
                    "to": {
                        "insId": "Transform-244",
                        "pinId": "to"
                    }
                },
                {
                    "from": {
                        "insId": "Pick-631",
                        "pinId": "e"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "no"
                    }
                },
                {
                    "from": {
                        "insId": "Pick-631",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "value"
                    }
                }
            ],
            "controlled": false,
            "inputsPosition": {
                "obj": {
                    "x": 0,
                    "y": 0
                },
                "key": {
                    "x": 131.02912565443012,
                    "y": 1.185922256102797
                },
                "value": {
                    "x": 109.57379698327027,
                    "y": 432.7913263156525
                }
            },
            "outputsPosition": {
                "yes": {
                    "x": -124.74231291007487,
                    "y": 504.1237182588364
                },
                "no": {
                    "x": 203.09272889992454,
                    "y": 512.3711238476654
                },
                "value": {
                    "x": 65.51598909952996,
                    "y": 519.8002718700914
                }
            }
        },
        "Accumulate": {
            "id": "Accumulate",
            "inputs": {
                "count": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "val": {
                    "type": "any",
                    "mode": "optional"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const {count, val} = inputs;\nconst {r} = outputs;\n\nconst {state} = adv;\n\nlet list = state.get(\"list\") || [];\n\nif (count !== state.get(\"count\")) {\n    list = [];\n    state.set(\"count\", count);\n}\n\nif (isDefined(val)) {\n    list.push(val);\n}\n\n\nstate.set(\"list\", list);\n\nif (list.length === state.get(\"count\")) {\n    r.next(list);\n}",
            "controlled": false,
            "completionOutputs": [
                "r"
            ],
            "reactiveInputs": [
                "val"
            ]
        },
        "Accumulate2": {
            "id": "Accumulate2",
            "inputs": {
                "val": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "first": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "second": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "both": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Accumulate-780",
                    "partId": "Accumulate",
                    "inputConfig": {
                        "count": {
                            "mode": "static",
                            "value": 2
                        }
                    },
                    "pos": {
                        "x": 190.94394042968747,
                        "y": -3.34228057861327
                    }
                },
                {
                    "id": "GetListItem-773",
                    "partId": "GetListItem",
                    "inputConfig": {
                        "idx": {
                            "mode": "static",
                            "value": 0
                        }
                    },
                    "pos": {
                        "x": -65.92128540039062,
                        "y": 211.12256072998048
                    }
                },
                {
                    "id": "GetListItem-773-d931",
                    "partId": "GetListItem",
                    "inputConfig": {
                        "idx": {
                            "mode": "static",
                            "value": 1
                        }
                    },
                    "pos": {
                        "x": 160.76220153808595,
                        "y": 231.621103515625
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "val"
                    },
                    "to": {
                        "insId": "Accumulate-780",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "Accumulate-780",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "both"
                    }
                },
                {
                    "from": {
                        "insId": "Accumulate-780",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "GetListItem-773-d931",
                        "pinId": "list"
                    }
                },
                {
                    "from": {
                        "insId": "Accumulate-780",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "GetListItem-773",
                        "pinId": "list"
                    }
                },
                {
                    "from": {
                        "insId": "GetListItem-773",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "first"
                    }
                },
                {
                    "from": {
                        "insId": "GetListItem-773-d931",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "second"
                    }
                }
            ],
            "controlled": false,
            "inputsPosition": {
                "val": {
                    "x": 147.10448788089192,
                    "y": -138.41179896034907
                },
                "count": {
                    "x": 270.98201041172285,
                    "y": -142.9454813415013
                }
            },
            "outputsPosition": {
                "first": {
                    "x": -61.649123578945215,
                    "y": 406.07703536662933
                },
                "second": {
                    "x": 205.19825783822876,
                    "y": 409.7232566081811
                },
                "both": {
                    "x": 494.1763119626382,
                    "y": 375.6799444139285
                },
                "count": {
                    "x": 319.66831822564365,
                    "y": -114.59000794848262
                }
            },
            "completionOutputs": [
                "both"
            ],
            "reactiveInputs": [
                "val"
            ]
        },
        "AccumulateSome": {
            "id": "AccumulateSome",
            "inputs": {
                "count": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "allow": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "filter": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const {count, allow, filter} = inputs;\nconst {r} = outputs;\n\nconst {state} = adv;\n\nlet allowedList = state.get(\"allowed-list\") || [];\nlet filterList = state.get(\"filter-list\") || [];\n\nif (count !== state.get(\"count\")) {\n    state.set(\"count\", count);\n}\n\nif (isDefined(allow)) {\n    allowedList.push(allow);\n}\n\nif (isDefined(filter)) {\n    filterList.push(filter);\n}\n\nstate.set(\"allowed-list\", allowedList);\nstate.set(\"filter-list\", filterList);\n\nif (allowedList.length + filterList.length === state.get(\"count\")) {\n    r.next(allowedList);\n}\n",
            "controlled": false,
            "completionOutputs": [
                "r"
            ],
            "reactiveInputs": [
                "allow",
                "filter"
            ]
        },
        "Merge": {
            "id": "Merge",
            "inputs": {
                "a": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                },
                "b": {
                    "type": "any",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Id-979",
                    "partId": "Id",
                    "inputConfig": {},
                    "pos": {
                        "x": 82.87286376953125,
                        "y": 164.94470642089843
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "a"
                    },
                    "to": {
                        "insId": "Id-979",
                        "pinId": "v"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "b"
                    },
                    "to": {
                        "insId": "Id-979",
                        "pinId": "v"
                    }
                },
                {
                    "from": {
                        "insId": "Id-979",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "r"
                    }
                }
            ],
            "controlled": false,
            "inputsPosition": {
                "a": {
                    "x": 0,
                    "y": 0
                },
                "b": {
                    "x": 200,
                    "y": 0
                }
            },
            "outputsPosition": {
                "r": {
                    "x": 100,
                    "y": 400
                }
            },
            "completionOutputs": [
                "r"
            ],
            "reactiveInputs": [
                "a",
                "b"
            ]
        },
        "HOP_ScanValue-576_onValue": {
            "id": "HOP_ScanValue-576_onValue",
            "outputsPosition": {
                "newVal": {
                    "x": -66.12734854192284,
                    "y": 344.7868620971345
                }
            },
            "inputsPosition": {
                "currValue": {
                    "x": -16.363656493942194,
                    "y": -212.72726406233642
                },
                "prevValue": {
                    "x": -328.1817929794024,
                    "y": -236.36361997199768
                }
            },
            "inputs": {
                "prevValue": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "currValue": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "newVal": {
                    "type": "any",
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Add-212",
                    "partId": "Add",
                    "inputConfig": {},
                    "pos": {
                        "x": -70.46533935546876,
                        "y": 92.24279052734374
                    }
                },
                {
                    "id": "Transform-452",
                    "partId": "Transform",
                    "inputConfig": {
                        "to": {
                            "mode": "static",
                            "value": 1
                        }
                    },
                    "pos": {
                        "x": 13.577863769531248,
                        "y": -67.44209838867188
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "prevValue"
                    },
                    "to": {
                        "insId": "Add-212",
                        "pinId": "n1"
                    }
                },
                {
                    "from": {
                        "insId": "Add-212",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "newVal"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "currValue"
                    },
                    "to": {
                        "insId": "Transform-452",
                        "pinId": "from"
                    }
                },
                {
                    "from": {
                        "insId": "Transform-452",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Add-212",
                        "pinId": "n2"
                    }
                }
            ]
        },
        "TesterOfEmpty": {
            "id": "TesterOfEmpty",
            "inputs": {
                "str": {
                    "type": "any",
                    "mode": "required"
                },
                "offset": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "s": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "IsEmpty-438",
                    "partId": "IsEmpty",
                    "inputConfig": {},
                    "pos": {
                        "x": 228.92482788085937,
                        "y": 123.06610473632813
                    }
                },
                {
                    "id": "Id-617",
                    "partId": "Id",
                    "inputConfig": {},
                    "pos": {
                        "x": -61.07,
                        "y": 93.82
                    }
                },
                {
                    "id": "ListFrom2-681",
                    "partId": "ListFrom2",
                    "inputConfig": {},
                    "pos": {
                        "x": -2.128559570312504,
                        "y": 270.3304107666016
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "offset"
                    },
                    "to": {
                        "insId": "IsEmpty-438",
                        "pinId": "str"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "str"
                    },
                    "to": {
                        "insId": "Id-617",
                        "pinId": "v"
                    }
                },
                {
                    "from": {
                        "insId": "IsEmpty-438",
                        "pinId": "true"
                    },
                    "to": {
                        "insId": "ListFrom2-681",
                        "pinId": "item2"
                    }
                },
                {
                    "from": {
                        "insId": "IsEmpty-438",
                        "pinId": "false"
                    },
                    "to": {
                        "insId": "ListFrom2-681",
                        "pinId": "item2"
                    }
                },
                {
                    "from": {
                        "insId": "Id-617",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "ListFrom2-681",
                        "pinId": "item1"
                    }
                },
                {
                    "from": {
                        "insId": "ListFrom2-681",
                        "pinId": "list"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "s"
                    }
                }
            ],
            "inputsPosition": {
                "str": {
                    "x": 1.8181762466029432,
                    "y": -33.63636782256
                },
                "offset": {
                    "x": 158.39220196574718,
                    "y": -36.4382127601127
                }
            },
            "outputsPosition": {
                "s": {
                    "x": 26.56,
                    "y": 493.18
                }
            },
            "completionOutputs": [
                "s"
            ]
        },
        "TestOfAccSome": {
            "id": "TestOfAccSome",
            "inputs": {
                "a": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "r2": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "SpreadList-880",
                    "partId": "SpreadList",
                    "inputConfig": {
                        "list": {
                            "mode": "static",
                            "value": [
                                [
                                    1
                                ],
                                [
                                    2
                                ],
                                [
                                    3
                                ]
                            ]
                        }
                    },
                    "pos": {
                        "x": -392.9765795898437,
                        "y": 57.15516021728516
                    }
                },
                {
                    "id": "AccumulateSome-75",
                    "partId": "AccumulateSome",
                    "inputConfig": {
                        "count": {
                            "mode": "static",
                            "value": 1
                        }
                    },
                    "pos": {
                        "x": -336.4517333984375,
                        "y": 524.7437069702148
                    }
                },
                {
                    "id": "Accumulate-869",
                    "partId": "Accumulate",
                    "inputConfig": {
                        "count": {
                            "mode": "static",
                            "value": 1
                        }
                    },
                    "pos": {
                        "x": -575.1424633789063,
                        "y": 519.5536912536621
                    }
                },
                {
                    "id": "SpreadListDelayed-983",
                    "partId": "SpreadListDelayed",
                    "inputConfig": {},
                    "pos": {
                        "x": -673.6451489257813,
                        "y": 292.0476149749756
                    }
                },
                {
                    "id": "SpreadListDelayed-547",
                    "partId": "SpreadListDelayed",
                    "inputConfig": {
                        "list": {
                            "mode": "static",
                            "value": [
                                [
                                    1,
                                    5,
                                    6
                                ],
                                [
                                    3
                                ],
                                [
                                    4,
                                    7
                                ]
                            ]
                        }
                    },
                    "pos": {
                        "x": -681.9226171875,
                        "y": 85.79833587646485
                    }
                },
                {
                    "id": "Accumulate-869-d919",
                    "partId": "Accumulate",
                    "inputConfig": {
                        "count": {
                            "mode": "static",
                            "value": 1
                        }
                    },
                    "pos": {
                        "x": -907.9038159179688,
                        "y": 337.3001626586914
                    }
                },
                {
                    "id": "SpreadList-886",
                    "partId": "SpreadList",
                    "inputConfig": {},
                    "pos": {
                        "x": -931.68,
                        "y": 145.18
                    }
                },
                {
                    "id": "SpreadListDelayed-582",
                    "partId": "SpreadListDelayed",
                    "inputConfig": {},
                    "pos": {
                        "x": -383.56,
                        "y": 273.64
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "SpreadListDelayed-983",
                        "pinId": "val"
                    },
                    "to": {
                        "insId": "Accumulate-869",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "SpreadListDelayed-547",
                        "pinId": "val"
                    },
                    "to": {
                        "insId": "SpreadListDelayed-983",
                        "pinId": "list"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "a"
                    },
                    "to": {
                        "insId": "SpreadList-886",
                        "pinId": "list"
                    }
                },
                {
                    "from": {
                        "insId": "SpreadList-886",
                        "pinId": "val"
                    },
                    "to": {
                        "insId": "Accumulate-869-d919",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "SpreadList-880",
                        "pinId": "val"
                    },
                    "to": {
                        "insId": "SpreadListDelayed-582",
                        "pinId": "list"
                    }
                },
                {
                    "from": {
                        "insId": "SpreadListDelayed-582",
                        "pinId": "val"
                    },
                    "to": {
                        "insId": "AccumulateSome-75",
                        "pinId": "allow"
                    }
                }
            ],
            "inputsPosition": {
                "a": {
                    "x": -864.5455210733347,
                    "y": 37.0853412319167
                }
            },
            "outputsPosition": {
                "r": {
                    "x": -74.07311811648336,
                    "y": 1335.3780521565373
                },
                "r2": {
                    "x": 286.74,
                    "y": 1157.5
                }
            }
        },
        "TestOf3PinIssue": {
            "id": "TestOf3PinIssue",
            "inputs": {
                "a": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "ListFrom3-885",
                    "partId": "ListFrom3",
                    "inputConfig": {
                        "item1": {
                            "mode": "static",
                            "value": "gg"
                        },
                        "item2": {
                            "mode": "static",
                            "value": "22"
                        },
                        "item3": {
                            "mode": "static",
                            "value": "aaa"
                        }
                    },
                    "pos": {
                        "x": 58.49354736328125,
                        "y": 140.0098048400879
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "ListFrom3-885",
                        "pinId": "list"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "r"
                    }
                }
            ],
            "inputsPosition": {
                "a": {
                    "x": 0,
                    "y": 0
                }
            },
            "outputsPosition": {
                "r": {
                    "x": 100,
                    "y": 400
                }
            },
            "completionOutputs": [
                "r"
            ]
        },
        "FirstSecondOnlyRest": {
            "id": "FirstSecondOnlyRest",
            "inputs": {
                "list": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "i0": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "i1": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "rest": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { list } = inputs;\nconst { i0, i1, rest } = outputs;\n      \nconst [_i0, _i1, ...r] = list;\n\n[i0, i1].forEach((o, idx) => {\n    if (typeof list[idx] !== 'undefined') {\n        o.next(list[idx]);\n    }\n});\n\nr.length && rest.next(r)\n      "
        },
        "RoundRobin3": {
            "id": "RoundRobin3",
            "inputs": {
                "item": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r1": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "r2": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "r3": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {state} = adv;\nconst {r1, r2, r3} = outputs;\nconst curr = state.get('curr') || 0;\n\nconst o = [r1, r2, r3][curr];\n\nconst nextCurr = (curr + 1) % 3;\n\nlog(nextCurr, curr);\no.next(inputs.item);\nstate.set('curr', nextCurr);",
            "completionOutputs": [
                "never"
            ],
            "reactiveInputs": [
                "item"
            ]
        },
        "FlattenArray": {
            "id": "FlattenArray",
            "inputs": {
                "arrayOfArrays": {
                    "type": "any",
                    "mode": "required"
                },
                "depth": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "array": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\n\nconst flattened = inputs.arrayOfArrays.flat(inputs.depth || 1);\noutputs.array.next(flattened);",
            "completionOutputs": [
                "array"
            ]
        },
        "IncState": {
            "id": "IncState",
            "inputs": {
                "key": {
                    "type": "any",
                    "mode": "required"
                },
                "val": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "GetState-837",
                    "partId": "GetState",
                    "inputConfig": {},
                    "pos": {
                        "x": 22.655526123046855,
                        "y": 152.19640151977538
                    }
                },
                {
                    "id": "Transform-49",
                    "partId": "Transform",
                    "inputConfig": {
                        "to": {
                            "mode": "static",
                            "value": 0
                        }
                    },
                    "pos": {
                        "x": 268.38306884765626,
                        "y": 258.5248794555664
                    }
                },
                {
                    "id": "Merge-843",
                    "partId": "Merge",
                    "inputConfig": {},
                    "pos": {
                        "x": 67.4421728515625,
                        "y": 373.56526992797853
                    }
                },
                {
                    "id": "Add-627",
                    "partId": "Add",
                    "inputConfig": {},
                    "pos": {
                        "x": 116.54649902343749,
                        "y": 531.4074108886718
                    }
                },
                {
                    "id": "SetState-795",
                    "partId": "SetState",
                    "inputConfig": {},
                    "pos": {
                        "x": -151.1680419921875,
                        "y": 662.9141485595703
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "key"
                    },
                    "to": {
                        "insId": "GetState-837",
                        "pinId": "key"
                    }
                },
                {
                    "from": {
                        "insId": "GetState-837",
                        "pinId": "err"
                    },
                    "to": {
                        "insId": "Transform-49",
                        "pinId": "from"
                    }
                },
                {
                    "from": {
                        "insId": "GetState-837",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Merge-843",
                        "pinId": "a"
                    }
                },
                {
                    "from": {
                        "insId": "Transform-49",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Merge-843",
                        "pinId": "b"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "val"
                    },
                    "to": {
                        "insId": "Add-627",
                        "pinId": "n2"
                    }
                },
                {
                    "from": {
                        "insId": "Merge-843",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Add-627",
                        "pinId": "n1"
                    }
                },
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "key"
                    },
                    "to": {
                        "insId": "SetState-795",
                        "pinId": "key"
                    }
                },
                {
                    "from": {
                        "insId": "Add-627",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "SetState-795",
                        "pinId": "value"
                    }
                },
                {
                    "from": {
                        "insId": "Add-627",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "r"
                    }
                }
            ],
            "inputsPosition": {
                "key": {
                    "x": -76.65097432304756,
                    "y": 5.896224966039105
                },
                "val": {
                    "x": 369.1542438417885,
                    "y": -3.731338322790656
                }
            },
            "outputsPosition": {
                "r": {
                    "x": 251.0626870006079,
                    "y": 683.6652230620817
                }
            },
            "completionOutputs": [
                "r"
            ]
        },
        "TestOfIncState": {
            "id": "TestOfIncState",
            "inputs": {
                "a": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "IncState-757",
                    "partId": "IncState",
                    "inputConfig": {
                        "key": {
                            "mode": "static",
                            "value": "bob"
                        }
                    },
                    "pos": {
                        "x": -44.588767089843756,
                        "y": 193.59751037597655
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "insId": "__this",
                        "pinId": "a"
                    },
                    "to": {
                        "insId": "IncState-757",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "IncState-757",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "__this",
                        "pinId": "r"
                    }
                }
            ],
            "inputsPosition": {
                "a": {
                    "x": 0,
                    "y": 0
                }
            },
            "outputsPosition": {
                "r": {
                    "x": 100,
                    "y": 400
                }
            },
            "completionOutputs": [
                "never"
            ],
            "reactiveInputs": [
                "a"
            ]
        },
        "LimitTimes": {
            "id": "LimitTimes",
            "inputs": {
                "item": {
                    "type": "any",
                    "mode": "required"
                },
                "times": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "ok": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "breach": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {state} = adv;\nconst {item, times} = inputs;\nconst {ok, breach} = outputs;\n\nlet curr = state.get('val') || 0;\ncurr++;\nstate.set('val', curr);\nif (curr >= times) {\n    breach.next(item);\n} else {\n    ok.next(item);\n}\n",
            "completionOutputs": [
                "breach"
            ],
            "reactiveInputs": [
                "item"
            ]
        },
        "MouseEvent": {
            "id": "MouseEvent",
            "inputs": {},
            "outputs": {
                "event": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "getDocument().body.addEventListener('mousemove', ev => {\n  outputs.event.next(ev);\n})",
            "controlled": false,
            "completionOutputs": [
                "never"
            ]
        },
        "WebScraper": {
            "id": "WebScraper",
            "inputs": {
                "url": {
                    "type": "any",
                    "mode": "required"
                },
                "config": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "result": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {onError} = adv;\n\nscrapeIt(inputs.url, inputs.config).then(({ data, response }) => {\n    outputs.result.next(data)\n}, err => {\n    onError(err);\n})",
            "completionOutputs": [
                "result"
            ]
        },
        "AccumulateUntil": {
            "id": "AccumulateUntil",
            "inputs": {
                "item": {
                    "type": "any",
                    "mode": "optional"
                },
                "until": {
                    "type": "any",
                    "mode": "optional"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {item, until} = inputs;\nconst {r} = outputs;\nconst {state} = adv;\n\nlet list = state.get(\"list\") || [];\n\n    if (isDefined(item)) {\n      list.push(item);\n      state.set(\"list\", list);\n    }\n\n    if (isDefined(until)) {\n      r.next(list);\n    }",
            "completionOutputs": [
                "r"
            ],
            "reactiveInputs": [
                "item",
                "until"
            ]
        },
        "AccumulateUntilTimeVis": {
            "id": "AccumulateUntilTimeVis",
            "inputs": {
                "item": {
                    "type": "any",
                    "mode": "optional"
                },
                "time": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Delay-271",
                    "partId": "Delay",
                    "inputConfig": {
                        "value": {
                            "mode": "static",
                            "value": "stop!"
                        }
                    },
                    "pos": {
                        "x": 193.2428515625,
                        "y": 149.658046875
                    }
                },
                {
                    "id": "AccumulateUntil-254",
                    "partId": "AccumulateUntil",
                    "inputConfig": {},
                    "pos": {
                        "x": 31.00727539062501,
                        "y": 246.62749145507814
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "pinId": "time",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "Delay-271",
                        "pinId": "ms"
                    }
                },
                {
                    "from": {
                        "insId": "Delay-271",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "AccumulateUntil-254",
                        "pinId": "until"
                    }
                },
                {
                    "from": {
                        "pinId": "item",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "AccumulateUntil-254",
                        "pinId": "item"
                    }
                },
                {
                    "from": {
                        "insId": "AccumulateUntil-254",
                        "pinId": "r"
                    },
                    "to": {
                        "pinId": "r",
                        "insId": "__this"
                    }
                }
            ],
            "inputsPosition": {
                "item": {
                    "x": 0,
                    "y": 0
                },
                "time": {
                    "x": 200,
                    "y": 0
                }
            },
            "outputsPosition": {
                "r": {
                    "x": 103.63635004008519,
                    "y": 428.1818175368
                }
            },
            "completionOutputs": [
                "r"
            ],
            "reactiveInputs": [
                "item",
                "time"
            ]
        },
        "AccumulateUntilTime": {
            "id": "AccumulateUntilTime",
            "inputs": {
                "time": {
                    "type": "any",
                    "mode": "required"
                },
                "item": {
                    "type": "any",
                    "mode": "optional"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const {item, time} = inputs;\nconst {r} = outputs;\nconst {state} = adv;\n\n\nlet list = state.get(\"list\") || [];\nif (isDefined(item)) {\n  list.push(item);\n  state.set(\"list\", list);\n\n  const timer = state.get(\"timer\");\n  \n  if (timer) {\n    clearTimeout(timer);\n  } \n  \n  const newTimer = setTimeout(() => {\n      r.next(state.get(\"list\") || []);\n  }, time);\n  \n  state.set(\"timer\", newTimer)\n}\n\n\n",
            "completionOutputs": [
                "r"
            ],
            "reactiveInputs": [
                "item"
            ]
        },
        "MergeObjects": {
            "id": "MergeObjects",
            "inputs": {
                "obj1": {
                    "type": "any",
                    "mode": "required"
                },
                "obj2": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {obj1, obj2} = inputs;\noutputs.r.next({...obj1, ...obj2});",
            "completionOutputs": [
                "r"
            ]
        },
        "epochToString": {
            "id": "epochToString",
            "inputs": {
                "epoch": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\n\nconst d = new Date(inputs.epoch);\noutputs.r.next(d.toLocaleString());",
            "completionOutputs": [
                "r"
            ]
        },
        "ReloadPage": {
            "id": "ReloadPage",
            "inputs": {
                "reload": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {},
            "fnCode": "const document = getDocument();\ndocument.location.reload();\n",
            "controlled": false
        },
        "DbCount": {
            "id": "DbCount",
            "inputs": {
                "query": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "count": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst {query} = inputs;\n\nconst {onError} = adv;\n\ndb.count(query)\n    .then(d => outputs.count.next(d))\n    .catch(err => {\n        onError(err);\n    });\n",
            "controlled": false,
            "completionOutputs": [
                "count"
            ]
        },
        "MillisToDateString": {
            "id": "MillisToDateString",
            "inputs": {
                "ms": {
                    "type": "any",
                    "mode": "required"
                },
                "locale": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "options": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "dateString": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\n\nconst {ms, locale, options} = inputs;\nconst {dateString} = outputs;\n\nconst _locale = locale || 'en-US';\nconst _options = options || {};\n\nconst str = new Date(ms).toLocaleDateString(_locale, _options);\n\ndateString.next(str);",
            "completionOutputs": [
                "dateString"
            ]
        },
        "UI tester": {
            "id": "UI tester",
            "inputs": {
                "mouse": {
                    "type": "obj",
                    "optional": true,
                    "mode": "optional"
                },
                "keyPress": {
                    "type": "obj",
                    "optional": true,
                    "mode": "optional"
                }
            },
            "outputs": {
                "jsx": {
                    "type": "jsx",
                    "delayed": false,
                    "optional": false
                }
            },
            "inputsPosition": {
                "mouse": {
                    "x": 35.86348196105321,
                    "y": -364.0287124683135
                },
                "keyPress": {
                    "x": 607.2119328350132,
                    "y": -253.45397666631152
                }
            },
            "outputsPosition": {
                "response": {
                    "x": 0,
                    "y": 400
                },
                "jsx": {
                    "x": -532.6700480392535,
                    "y": 478.80609538260927
                }
            },
            "connections": [
                {
                    "from": {
                        "insId": "sub-426",
                        "pinId": "val"
                    },
                    "to": {
                        "insId": "Transform-550",
                        "pinId": "from"
                    }
                },
                {
                    "from": {
                        "insId": "id-552",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Transform-550",
                        "pinId": "to"
                    }
                },
                {
                    "from": {
                        "insId": "HtmlDiv-ins",
                        "pinId": "click"
                    },
                    "to": {
                        "insId": "pub-878",
                        "pinId": "value"
                    }
                }
            ],
            "instances": [
                {
                    "id": "Transform-550",
                    "partId": "Transform",
                    "inputConfig": {
                        "to": {
                            "mode": "sticky"
                        }
                    },
                    "pos": {
                        "x": -538.6681103515625,
                        "y": -138.5090856933594
                    }
                },
                {
                    "id": "pub-878",
                    "partId": "Publish",
                    "inputConfig": {
                        "key": {
                            "mode": "static",
                            "value": "click"
                        }
                    },
                    "pos": {
                        "x": -267.97675048828125,
                        "y": 465.83757797241213
                    }
                },
                {
                    "id": "sub-426",
                    "partId": "Subscribe",
                    "inputConfig": {
                        "key": {
                            "mode": "static",
                            "value": "click"
                        }
                    },
                    "pos": {
                        "x": -576.937470703125,
                        "y": -241.93766601562498
                    }
                },
                {
                    "id": "id-552",
                    "partId": "Id",
                    "inputConfig": {
                        "val": {
                            "mode": "static",
                            "value": "Bob"
                        }
                    },
                    "pos": {
                        "x": -318.03816650390627,
                        "y": -262.10097412109377
                    }
                },
                {
                    "id": "HtmlDiv-ins",
                    "partId": "HtmlDiv",
                    "inputConfig": {},
                    "pos": {
                        "x": -466.7677825927734,
                        "y": 236.22352294921876
                    }
                },
                {
                    "id": "HtmlTag-292",
                    "partId": "HtmlTag",
                    "inputConfig": {},
                    "pos": {
                        "x": 246.02260864257812,
                        "y": -34.234521484374994
                    }
                },
                {
                    "id": "HtmlValueTag-149",
                    "partId": "HtmlValueTag",
                    "inputConfig": {
                        "tagName": {
                            "mode": "static",
                            "value": "input"
                        }
                    },
                    "pos": {
                        "x": -52.98415039062502,
                        "y": 192.06499938964845
                    }
                },
                {
                    "id": "Transform-30",
                    "partId": "Transform",
                    "inputConfig": {},
                    "pos": {
                        "x": -921.34,
                        "y": -236.06
                    }
                },
                {
                    "id": "Add-980",
                    "partId": "Add",
                    "inputConfig": {},
                    "pos": {
                        "x": -323.21,
                        "y": -128.01
                    }
                },
                {
                    "id": "CollectionFind-597",
                    "partId": "CollectionFind",
                    "inputConfig": {},
                    "pos": {
                        "x": -1040.0700000000002,
                        "y": 94.74000000000001
                    }
                },
                {
                    "id": "CollectionFind-531",
                    "partId": "CollectionFind",
                    "inputConfig": {},
                    "pos": {
                        "x": -1096.2174462890625,
                        "y": -39.085946044921876
                    }
                },
                {
                    "id": "CollectionFindOneAndUpdate-184",
                    "partId": "CollectionFindOneAndUpdate",
                    "inputConfig": {},
                    "pos": {
                        "x": -870.6577099609375,
                        "y": 28.04667236328125
                    }
                },
                {
                    "id": "GetItem-391",
                    "partId": "GetItem",
                    "inputConfig": {},
                    "pos": {
                        "x": -979.57,
                        "y": 390.67
                    }
                },
                {
                    "id": "IsGreater-141",
                    "partId": "IsGreater",
                    "inputConfig": {},
                    "pos": {
                        "x": -126.13,
                        "y": 56.260000000000005
                    }
                }
            ],
            "completionOutputs": [
                "jsx"
            ]
        },
        "Tester of Merge": {
            "id": "Tester of Merge",
            "inputs": {
                "a": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Merge-22",
                    "partId": "Merge",
                    "inputConfig": {},
                    "pos": {
                        "x": -6.950776367187501,
                        "y": 160.76382263183592
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "pinId": "a",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "Merge-22",
                        "pinId": "a"
                    }
                },
                {
                    "from": {
                        "pinId": "a",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "Merge-22",
                        "pinId": "b"
                    }
                },
                {
                    "from": {
                        "insId": "Merge-22",
                        "pinId": "r"
                    },
                    "to": {
                        "pinId": "r",
                        "insId": "__this"
                    }
                }
            ],
            "inputsPosition": {
                "a": {
                    "x": 0,
                    "y": 0
                }
            },
            "outputsPosition": {
                "r": {
                    "x": 33.558563231349595,
                    "y": 338.06306457534095
                }
            },
            "completionOutputs": [
                "r"
            ]
        },
        "Test of subscribe": {
            "id": "Test of subscribe",
            "inputs": {
                "a": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Repeat-549",
                    "partId": "Repeat",
                    "inputConfig": {
                        "count": {
                            "mode": "static",
                            "value": 5
                        }
                    },
                    "pos": {
                        "x": 132.787744140625,
                        "y": 100.67126525878905
                    }
                },
                {
                    "id": "Delay-196",
                    "partId": "Delay",
                    "inputConfig": {
                        "ms": {
                            "mode": "static",
                            "value": 2000
                        }
                    },
                    "pos": {
                        "x": 120.29314819335934,
                        "y": 287.50246063232424
                    }
                },
                {
                    "id": "Subscribe-400",
                    "partId": "Subscribe",
                    "inputConfig": {
                        "key": {
                            "mode": "static",
                            "value": "bob"
                        }
                    },
                    "pos": {
                        "x": -466.9599877929687,
                        "y": 255.83231323242188
                    }
                },
                {
                    "id": "Publish-460",
                    "partId": "Publish",
                    "inputConfig": {
                        "key": {
                            "mode": "static",
                            "value": "bob"
                        }
                    },
                    "pos": {
                        "x": 83.50069335937499,
                        "y": 452.69927490234375
                    }
                },
                {
                    "id": "Accumulate-294",
                    "partId": "Accumulate",
                    "inputConfig": {
                        "count": {
                            "mode": "static",
                            "value": 5
                        }
                    },
                    "pos": {
                        "x": -298.74,
                        "y": 408.85
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "pinId": "a",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "Repeat-549",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "Repeat-549",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Delay-196",
                        "pinId": "value"
                    }
                },
                {
                    "from": {
                        "insId": "Delay-196",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Publish-460",
                        "pinId": "value"
                    }
                },
                {
                    "from": {
                        "insId": "Subscribe-400",
                        "pinId": "val"
                    },
                    "to": {
                        "insId": "Accumulate-294",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "Accumulate-294",
                        "pinId": "r"
                    },
                    "to": {
                        "pinId": "r",
                        "insId": "__this"
                    }
                }
            ],
            "inputsPosition": {
                "a": {
                    "x": 0,
                    "y": 0
                }
            },
            "outputsPosition": {
                "r": {
                    "x": -69.16847062074243,
                    "y": 651.7709970126695
                }
            },
            "completionOutputs": [
                "r"
            ]
        },
        "Test of debounce": {
            "id": "Test of debounce",
            "inputs": {
                "a": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Debounce-199",
                    "partId": "Debounce",
                    "inputConfig": {
                        "ms": {
                            "mode": "static",
                            "value": 500
                        }
                    },
                    "pos": {
                        "x": 145.58282104492184,
                        "y": 475.82003692626955
                    }
                },
                {
                    "id": "Repeat-673",
                    "partId": "Repeat",
                    "inputConfig": {
                        "count": {
                            "mode": "static",
                            "value": 5
                        }
                    },
                    "pos": {
                        "x": 68.87,
                        "y": 87.46000000000001
                    }
                },
                {
                    "id": "Delay-328",
                    "partId": "Delay",
                    "inputConfig": {
                        "ms": {
                            "mode": "static",
                            "value": 1000
                        }
                    },
                    "pos": {
                        "x": -2.9718041992187523,
                        "y": 275.15917556762696
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "pinId": "a",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "Repeat-673",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "Repeat-673",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Delay-328",
                        "pinId": "value"
                    }
                },
                {
                    "from": {
                        "insId": "Delay-328",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Debounce-199",
                        "pinId": "i"
                    }
                },
                {
                    "from": {
                        "insId": "Debounce-199",
                        "pinId": "r"
                    },
                    "to": {
                        "pinId": "r",
                        "insId": "__this"
                    }
                }
            ],
            "inputsPosition": {
                "a": {
                    "x": 0,
                    "y": 0
                }
            },
            "outputsPosition": {
                "r": {
                    "x": 66.54125420799826,
                    "y": 667.4621176028547
                }
            },
            "completionOutputs": [
                "r"
            ]
        },
        "MillisToString": {
            "id": "MillisToString",
            "inputs": {
                "ms": {
                    "type": "any",
                    "mode": "required"
                },
                "locale": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "options": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "dateString": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\n\nconst {ms, locale, options} = inputs;\nconst {dateString} = outputs;\n\nconst _locale = locale || 'en-US';\nconst _options = options || {};\n\nconst str = new Date(ms).toLocaleString(_locale, _options);\n\ndateString.next(str);",
            "completionOutputs": [
                "dateString"
            ]
        },
        "HttpResponse": {
            "id": "HttpResponse",
            "inputs": {
                "statusCode": {
                    "type": "any",
                    "mode": "required"
                },
                "body": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "response": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Object-builder-75360-942",
                    "partId": "Object-builder-75360",
                    "inputConfig": {},
                    "pos": {
                        "x": -65.07217651367182,
                        "y": 185.1182067871094
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "pinId": "statusCode",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "Object-builder-75360-942",
                        "pinId": "statusCode"
                    }
                },
                {
                    "from": {
                        "pinId": "body",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "Object-builder-75360-942",
                        "pinId": "body"
                    }
                },
                {
                    "from": {
                        "insId": "Object-builder-75360-942",
                        "pinId": "r"
                    },
                    "to": {
                        "pinId": "response",
                        "insId": "__this"
                    }
                }
            ],
            "inputsPosition": {
                "statusCode": {
                    "x": -5.3060613688112035,
                    "y": 73.37662203501435
                },
                "body": {
                    "x": 208.34878226229236,
                    "y": 47.309814505141865
                }
            },
            "outputsPosition": {
                "response": {
                    "x": 100,
                    "y": 400
                }
            },
            "completionOutputs": [
                "response"
            ]
        },
        "Object-builder-75360": {
            "id": "Object-builder-75360",
            "inputs": {
                "statusCode": {
                    "type": "any",
                    "mode": "required"
                },
                "body": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "object",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "outputs.r.next(compileObjectTemplate(\"%7B%22statusCode%22%3A%22%24%7BstatusCode%7D%22%2C%22body%22%3A%22%24%7Bbody%7D%22%7D\", inputs));",
            "customViewCode": "{\"statusCode\":\"${statusCode}\",\"body\":\"${body}\"}",
            "dataBuilderSource": {
                "statusCode": "${statusCode}",
                "body": "${body}"
            }
        },
        "HttpRequest": {
            "id": "HttpRequest",
            "inputs": {
                "url": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "method": {
                    "type": "any",
                    "mode": "required"
                },
                "headers": {
                    "type": "any",
                    "mode": "required-if-connected"
                },
                "data": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { url, headers, method, data } = inputs;\nconst { r } = outputs;\n\nconst {onError} = adv;\n        \n// magic here\naxios({ url, method, data, headers, timeout: DEFAULT_AXIOS_TIMEOUT }).then((res) => {\n    r.next(res.data);\n}, (err) => {\n    onError(err);\n});",
            "completionOutputs": [
                "r"
            ]
        },
        "Cuid": {
            "id": "Cuid",
            "inputs": {
                "trigger": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\noutputs.r.next(cuid());",
            "completionOutputs": [
                "r"
            ]
        },
        "AssertProperties": {
            "id": "AssertProperties",
            "inputs": {
                "object": {
                    "type": "any",
                    "mode": "required"
                },
                "properties": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "valid": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "invalid": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "SpreadList-891",
                    "partId": "SpreadList",
                    "inputConfig": {},
                    "pos": {
                        "x": 152.7019580078125,
                        "y": 61.26265014648436
                    }
                },
                {
                    "id": "Pick-721",
                    "partId": "Pick",
                    "inputConfig": {
                        "obj": {
                            "mode": "sticky"
                        }
                    },
                    "pos": {
                        "x": 65.67140136718751,
                        "y": 215.87816307067874
                    }
                },
                {
                    "id": "AccumulateSome-452",
                    "partId": "AccumulateSome",
                    "inputConfig": {},
                    "pos": {
                        "x": 30.258820800781223,
                        "y": 367.10918533325196
                    }
                },
                {
                    "id": "Equals-991",
                    "partId": "Equals",
                    "inputConfig": {},
                    "pos": {
                        "x": 219.02531860351564,
                        "y": 578.823974609375
                    }
                },
                {
                    "id": "ListLength-407",
                    "partId": "ListLength",
                    "inputConfig": {},
                    "pos": {
                        "x": 79.05770874023438,
                        "y": 471.4003033447266
                    }
                },
                {
                    "id": "Transform-852",
                    "partId": "Transform",
                    "inputConfig": {},
                    "pos": {
                        "x": -139.71505615234375,
                        "y": 755.8596734619141
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "pinId": "properties",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "SpreadList-891",
                        "pinId": "list"
                    }
                },
                {
                    "from": {
                        "pinId": "object",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "Pick-721",
                        "pinId": "obj"
                    }
                },
                {
                    "from": {
                        "insId": "SpreadList-891",
                        "pinId": "val"
                    },
                    "to": {
                        "insId": "Pick-721",
                        "pinId": "key"
                    }
                },
                {
                    "from": {
                        "insId": "Pick-721",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "AccumulateSome-452",
                        "pinId": "allow"
                    }
                },
                {
                    "from": {
                        "insId": "Pick-721",
                        "pinId": "e"
                    },
                    "to": {
                        "insId": "AccumulateSome-452",
                        "pinId": "filter"
                    }
                },
                {
                    "from": {
                        "insId": "SpreadList-891",
                        "pinId": "length"
                    },
                    "to": {
                        "insId": "AccumulateSome-452",
                        "pinId": "count"
                    }
                },
                {
                    "from": {
                        "insId": "AccumulateSome-452",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "ListLength-407",
                        "pinId": "list"
                    }
                },
                {
                    "from": {
                        "insId": "ListLength-407",
                        "pinId": "length"
                    },
                    "to": {
                        "insId": "Equals-991",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "SpreadList-891",
                        "pinId": "length"
                    },
                    "to": {
                        "insId": "Equals-991",
                        "pinId": "compare"
                    }
                },
                {
                    "from": {
                        "insId": "Equals-991",
                        "pinId": "else"
                    },
                    "to": {
                        "pinId": "invalid",
                        "insId": "__this"
                    }
                },
                {
                    "from": {
                        "insId": "Equals-991",
                        "pinId": "r"
                    },
                    "to": {
                        "insId": "Transform-852",
                        "pinId": "from"
                    }
                },
                {
                    "from": {
                        "pinId": "object",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "Transform-852",
                        "pinId": "to"
                    }
                },
                {
                    "from": {
                        "insId": "Transform-852",
                        "pinId": "r"
                    },
                    "to": {
                        "pinId": "valid",
                        "insId": "__this"
                    }
                }
            ],
            "inputsPosition": {
                "object": {
                    "x": -55.384645394953175,
                    "y": -53.84614282603447
                },
                "properties": {
                    "x": 226.15382379249726,
                    "y": -43.07691624259918
                }
            },
            "outputsPosition": {
                "valid": {
                    "x": -99.19917561526897,
                    "y": 916.8863953711061
                },
                "invalid": {
                    "x": 300.69210394068347,
                    "y": 763.8126403738597
                }
            },
            "completionOutputs": [
                "invalid",
                "valid"
            ]
        },
        "SpreadList3": {
            "id": "SpreadList3",
            "inputs": {
                "list": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "first": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "second": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "third": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "GetListItem-877",
                    "partId": "GetListItem",
                    "inputConfig": {
                        "idx": {
                            "mode": "static",
                            "value": 0
                        }
                    },
                    "pos": {
                        "x": 65.52127563476563,
                        "y": 153.09548217773437
                    }
                },
                {
                    "id": "GetListItem-877-d285",
                    "partId": "GetListItem",
                    "inputConfig": {
                        "idx": {
                            "mode": "static",
                            "value": 1
                        }
                    },
                    "pos": {
                        "x": 267.9924060058594,
                        "y": 186.69313079833984
                    }
                },
                {
                    "id": "GetListItem-877-d285-d900",
                    "partId": "GetListItem",
                    "inputConfig": {
                        "idx": {
                            "mode": "static",
                            "value": 2
                        }
                    },
                    "pos": {
                        "x": 431.89740478515625,
                        "y": 176.2309420776367
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "pinId": "list",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "GetListItem-877",
                        "pinId": "list"
                    }
                },
                {
                    "from": {
                        "insId": "GetListItem-877",
                        "pinId": "r"
                    },
                    "to": {
                        "pinId": "first",
                        "insId": "__this"
                    }
                },
                {
                    "from": {
                        "pinId": "list",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "GetListItem-877-d285",
                        "pinId": "list"
                    }
                },
                {
                    "from": {
                        "insId": "GetListItem-877-d285",
                        "pinId": "r"
                    },
                    "to": {
                        "pinId": "second",
                        "insId": "__this"
                    }
                },
                {
                    "from": {
                        "insId": "GetListItem-877-d285-d900",
                        "pinId": "r"
                    },
                    "to": {
                        "pinId": "third",
                        "insId": "__this"
                    }
                },
                {
                    "from": {
                        "pinId": "list",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "GetListItem-877-d285-d900",
                        "pinId": "list"
                    }
                }
            ],
            "inputsPosition": {
                "list": {
                    "x": 326.68066376398093,
                    "y": 7.352935664945553
                }
            },
            "outputsPosition": {
                "first": {
                    "x": 100,
                    "y": 400
                },
                "second": {
                    "x": 300,
                    "y": 400
                },
                "third": {
                    "x": 500,
                    "y": 400
                },
                "rest": {
                    "x": 726.2604947250959,
                    "y": 383.1932748030569
                }
            }
        },
        "testofpick": {
            "id": "testofpick",
            "inputs": {
                "a": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "r": {
                    "type": "r",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Add-633",
                    "partId": "Add",
                    "inputConfig": {
                        "n2": {
                            "mode": "static",
                            "value": 42
                        }
                    },
                    "pos": {
                        "x": -102.20435302734376,
                        "y": -16.503823242187508
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "pinId": "a",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "Add-633",
                        "pinId": "n1"
                    }
                }
            ],
            "inputsPosition": {
                "a": {
                    "x": -273.1631366003362,
                    "y": -165.33473976413535
                }
            },
            "outputsPosition": {
                "r": {
                    "x": -83.18623962040333,
                    "y": 234.6862396204033
                }
            }
        },
        "Dot": {
            "id": "Dot",
            "inputs": {
                "obj": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "key": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                }
            },
            "outputs": {
                "value": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { obj, key } = inputs;\nconst { value } = outputs;\n\n// magic here\n\nlet hadError = false;\n\nconst matches = {};\n\nconst normalized = key.replace(/\\[\"(([^\"])+)\"\\]/g, (match, p1, p2, offset) => {\n  const key = `__$$KEY$$__${offset}`;\n  matches[key] = p1;\n  return `.${key}`;\n});\n\nconst path = normalized.split(\".\");\nlet o = { ...obj };\nfor (let p of path) {\n  const key = matches[p] || p;\n  if (o && isDefined(o[key]) && o[key] !== null) {\n    o = o[key];\n  } else {\n    value.next(null);\n    hadError = true;\n  }\n}\n\nif (!hadError) {\n  value.next(o);\n}\n",
            "customViewCode": "<% if (inputs.key) { %> .<%- inputs.key %> <% } else { %> Dot <% } %>",
            "completionOutputs": [
                "value"
            ]
        },
        "CollectionInsertOne": {
            "id": "CollectionInsertOne",
            "inputs": {
                "collectionName": {
                    "type": "any",
                    "mode": "required"
                },
                "item": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "success": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nmongoDb.collection(inputs.collectionName)\n    .insertOne(inputs.item)\n    .then(res => outputs.success.next({...inputs.item, _id: res.insertedId}))\n    .catch((e) => adv.onError(e));\n",
            "completionOutputs": [
                "success"
            ]
        },
        "CollectionFindOneAndUpdate": {
            "id": "CollectionFindOneAndUpdate",
            "inputs": {
                "options": {
                    "type": "any",
                    "mode": "optional"
                },
                "collectionName": {
                    "type": "any",
                    "mode": "required"
                },
                "filter": {
                    "type": "any",
                    "mode": "required"
                },
                "update": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "updatedItem": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nconst options = inputs.options || {returnDocument: 'after'};\nmongoDb\n    .collection(inputs.collectionName)\n    .findOneAndUpdate(inputs.filter, inputs.update, options)\n    .then((doc) => {\n        outputs.updatedItem.next(doc);\n    });",
            "completionOutputs": [
                "updatedItem"
            ]
        },
        "CollectionFind": {
            "id": "CollectionFind",
            "inputs": {
                "options": {
                    "type": "any",
                    "mode": "optional"
                },
                "collectionName": {
                    "type": "any",
                    "mode": "required"
                },
                "filter": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "items": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nmongoDb\n    .collection(inputs.collectionName)\n    .find(inputs.filter, inputs.options)\n    .toArray()\n    .then((doc) => {\n        outputs.items.next(doc);\n    })\n    .catch((e) => adv.onError(e))",
            "completionOutputs": [
                "items"
            ]
        },
        "CollectionFindOne": {
            "id": "CollectionFindOne",
            "inputs": {
                "collectionName": {
                    "type": "any",
                    "mode": "required"
                },
                "filter": {
                    "type": "any",
                    "mode": "required"
                },
                "options": {
                    "type": "any",
                    "mode": "optional"
                }
            },
            "outputs": {
                "item": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "mongoDb.collection(inputs.collectionName)\n    .findOne(inputs.filter, inputs.options)\n    .then(res => {\n        if (res === null) {\n            adv.onError(new Error('not found'));\n        } else {\n            outputs.item.next(res);\n        }\n    })\n    .catch((e) => adv.onError(e));",
            "completionOutputs": [
                "item"
            ]
        },
        "CollectionDeleteOne": {
            "id": "CollectionDeleteOne",
            "inputs": {
                "collectionName": {
                    "type": "any",
                    "mode": "required"
                },
                "filter": {
                    "type": "any",
                    "mode": "required"
                },
                "options": {
                    "type": "any",
                    "mode": "optional"
                }
            },
            "outputs": {
                "result": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "mongoDb.collection(inputs.collectionName)\n    .deleteOne(inputs.filter, inputs.options)\n    .then(res => {\n        outputs.result.next(res);\n    })\n    .catch((e) => adv.onError(e));",
            "completionOutputs": [
                "result"
            ]
        },
        "CollectionCountDocuments": {
            "id": "CollectionCountDocuments",
            "inputs": {
                "options": {
                    "type": "any",
                    "mode": "optional"
                },
                "collectionName": {
                    "type": "any",
                    "mode": "required"
                },
                "filter": {
                    "type": "any",
                    "mode": "required"
                },
                "": {
                    "type": "any",
                    "mode": "optional"
                }
            },
            "outputs": {
                "count": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "// magic here\nmongoDb\n    .collection(inputs.collectionName)\n    .countDocuments(inputs.filter, inputs.options)\n    .then((count) => {\n        outputs.count.next(count);\n    });",
            "completionOutputs": [
                "count"
            ]
        },
        "NewPart": {
            "id": "NewPart",
            "inputs": {
                "f": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {},
            "instances": [
                {
                    "id": "SetItem-362",
                    "partId": "SetItem",
                    "inputConfig": {
                        "key": {
                            "mode": "static",
                            "value": "dgfdg"
                        },
                        "value": {
                            "mode": "static",
                            "value": 42
                        }
                    },
                    "pos": {
                        "x": -210.536103515625,
                        "y": 69.48443603515625
                    }
                },
                {
                    "id": "GetItem-344",
                    "partId": "GetItem",
                    "inputConfig": {
                        "key": {
                            "mode": "static",
                            "value": "dgfdg"
                        },
                        "defaultValue": {
                            "mode": "static",
                            "value": 500
                        }
                    },
                    "pos": {
                        "x": 78.46392578125,
                        "y": 52.616253662109386
                    },
                    "visibleInputs": [
                        "__trigger",
                        "defaultValue"
                    ]
                }
            ],
            "connections": [],
            "inputsPosition": {
                "f": {
                    "x": 30.959782628458374,
                    "y": -147.058795235587
                }
            },
            "outputsPosition": {}
        },
        "isPropertyGreater": {
            "id": "isPropertyGreater",
            "inputs": {
                "obj": {
                    "type": "any",
                    "mode": "required"
                },
                "key": {
                    "type": "any",
                    "mode": "required"
                },
                "value": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "true": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "false": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const objVal = inputs.obj[inputs.key];\n\nif (objVal > inputs.value) {\n    outputs.true.next(inputs.obj)\n} else {\n    outputs.false.next(inputs.obj)\n}",
            "customViewCode": "<% if (inputs.key && inputs.value) { %>  .<%- inputs.key %> > <%- inputs.value %> <% } else { %> Is Property Greater <% } %>"
        },
        "IsGreater bool ": {
            "id": "IsGreater bool ",
            "inputs": {
                "n1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "n2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "transform": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "result": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { n1, n2, transform} = inputs;\n\n\noutputs.result.next(n1 > n2);\n      ",
            "customViewCode": "<% if (inputs.n2) { %>  > <%- inputs.n2 %> <% } else { %> Is Greater <% } %>"
        },
        "isLess bool": {
            "id": "isLess bool",
            "inputs": {
                "n1": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "n2": {
                    "type": "any",
                    "optional": false,
                    "mode": "required"
                },
                "transform": {
                    "type": "any",
                    "mode": "required-if-connected"
                }
            },
            "outputs": {
                "result": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "fnCode": "const { n1, n2, transform} = inputs;\n\n\noutputs.result.next(n1 < n2);\n      ",
            "customViewCode": "<% if (inputs.n2) { %>  < <%- inputs.n2 %> <% } else { %> Is Less <% } %>"
        },
        "Boolean Split": {
            "id": "Boolean Split",
            "inputs": {
                "val": {
                    "type": "any",
                    "mode": "required"
                }
            },
            "outputs": {
                "true": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                },
                "false": {
                    "type": "any",
                    "delayed": false,
                    "optional": false
                }
            },
            "instances": [
                {
                    "id": "Equals-530",
                    "partId": "Equals",
                    "inputConfig": {
                        "compare": {
                            "mode": "static",
                            "value": true
                        }
                    },
                    "pos": {
                        "x": -55.038107910156256,
                        "y": 123.8628857421875
                    }
                }
            ],
            "connections": [
                {
                    "from": {
                        "pinId": "val",
                        "insId": "__this"
                    },
                    "to": {
                        "insId": "Equals-530",
                        "pinId": "val"
                    }
                },
                {
                    "from": {
                        "insId": "Equals-530",
                        "pinId": "r"
                    },
                    "to": {
                        "pinId": "true",
                        "insId": "__this"
                    }
                },
                {
                    "from": {
                        "insId": "Equals-530",
                        "pinId": "else"
                    },
                    "to": {
                        "pinId": "false",
                        "insId": "__this"
                    }
                }
            ],
            "inputsPosition": {
                "val": {
                    "x": -53.899108855416266,
                    "y": -19.49542241235728
                }
            },
            "outputsPosition": {
                "true": {
                    "x": -107.53062440952482,
                    "y": 361.3771973987992
                },
                "false": {
                    "x": 75.17321928763755,
                    "y": 350.95064554922453
                }
            }
        }
    }
}